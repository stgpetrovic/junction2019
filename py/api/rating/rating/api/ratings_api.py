# coding: utf-8

"""
    Ratings API

    Service which holds ratings of various targets, like recipes.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from api.rating.rating.api_client import ApiClient
from api.rating.rating.exceptions import (
    ApiTypeError,
    ApiValueError
)


class RatingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_ratings_targetnamespace_id(self, target_namespace, id, **kwargs):  # noqa: E501
        """Delete rating.  # noqa: E501

        **Authorization:** Author x can't delete author y's rating.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ratings_targetnamespace_id(target_namespace, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str id: Target ID (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_ratings_targetnamespace_id_with_http_info(target_namespace, id, **kwargs)  # noqa: E501

    def delete_ratings_targetnamespace_id_with_http_info(self, target_namespace, id, **kwargs):  # noqa: E501
        """Delete rating.  # noqa: E501

        **Authorization:** Author x can't delete author y's rating.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ratings_targetnamespace_id_with_http_info(target_namespace, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str id: Target ID (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['target_namespace', 'id', 'x_ip_address', 'x_author_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ratings_targetnamespace_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'target_namespace' is set
        if self.api_client.client_side_validation and ('target_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['target_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target_namespace` when calling `delete_ratings_targetnamespace_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `delete_ratings_targetnamespace_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_namespace' in local_var_params:
            path_params['targetNamespace'] = local_var_params['target_namespace']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ip_address' in local_var_params:
            header_params['x-ip-address'] = local_var_params['x_ip_address']  # noqa: E501
        if 'x_author_id' in local_var_params:
            header_params['x-author-id'] = local_var_params['x_author_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ratings/{targetNamespace}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ratings_targetnamespace(self, target_namespace, **kwargs):  # noqa: E501
        """List ratings in a given target namespace.  # noqa: E501

        List ratings in a given target namespace. If requesting as a service user, unpublished ratings will not be returned.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ratings_targetnamespace(target_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str target_id: Search based on one or more targetIds. For example requesting targets [1,2] would be *?targetId=1&targetId=2*. 
        :param str author_id: Search based on one or more authorIds.
        :param str author_role: Search based on one or more authorRoles. **(only for above service role)** 
        :param str category: Search based on one or more categories.
        :param str sub_category: Search based on one or more sub categories.
        :param bool has_rating: Search based on if the rating has a numeric rating or not. If `true`, only ratings with a numeric rating are returned. 
        :param bool has_comment: Search based on if the rating has a comment or not. If true, only ratings with comment are returned. 
        :param bool reply_requested: Search based on if the rating's author wants a reply for their comment. **(only for above service role)** 
        :param bool moderated: Search based on if the rating is moderated or not. **(only for above service role)** 
        :param bool published: Search based on if the rating is published or not. **(only for above service role)** 
        :param str sort: Sort based on given field. Format: `attribute:direction`. `direction` is optional, default is **asc**. For example: `createdAt`, `updatedAt:desc`, `updatedAt:asc`. 
        :param int offset: Offset for pagination. Default is **0**. When using this parameter, specify `limit` explicitly. The defaults might change. 
        :param int limit: Limit of returned items. Default is **10**.
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ratings_targetnamespace_with_http_info(target_namespace, **kwargs)  # noqa: E501

    def get_ratings_targetnamespace_with_http_info(self, target_namespace, **kwargs):  # noqa: E501
        """List ratings in a given target namespace.  # noqa: E501

        List ratings in a given target namespace. If requesting as a service user, unpublished ratings will not be returned.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ratings_targetnamespace_with_http_info(target_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str target_id: Search based on one or more targetIds. For example requesting targets [1,2] would be *?targetId=1&targetId=2*. 
        :param str author_id: Search based on one or more authorIds.
        :param str author_role: Search based on one or more authorRoles. **(only for above service role)** 
        :param str category: Search based on one or more categories.
        :param str sub_category: Search based on one or more sub categories.
        :param bool has_rating: Search based on if the rating has a numeric rating or not. If `true`, only ratings with a numeric rating are returned. 
        :param bool has_comment: Search based on if the rating has a comment or not. If true, only ratings with comment are returned. 
        :param bool reply_requested: Search based on if the rating's author wants a reply for their comment. **(only for above service role)** 
        :param bool moderated: Search based on if the rating is moderated or not. **(only for above service role)** 
        :param bool published: Search based on if the rating is published or not. **(only for above service role)** 
        :param str sort: Sort based on given field. Format: `attribute:direction`. `direction` is optional, default is **asc**. For example: `createdAt`, `updatedAt:desc`, `updatedAt:asc`. 
        :param int offset: Offset for pagination. Default is **0**. When using this parameter, specify `limit` explicitly. The defaults might change. 
        :param int limit: Limit of returned items. Default is **10**.
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['target_namespace', 'target_id', 'author_id', 'author_role', 'category', 'sub_category', 'has_rating', 'has_comment', 'reply_requested', 'moderated', 'published', 'sort', 'offset', 'limit', 'x_ip_address', 'x_author_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ratings_targetnamespace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'target_namespace' is set
        if self.api_client.client_side_validation and ('target_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['target_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target_namespace` when calling `get_ratings_targetnamespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_namespace' in local_var_params:
            path_params['targetNamespace'] = local_var_params['target_namespace']  # noqa: E501

        query_params = []
        if 'target_id' in local_var_params and local_var_params['target_id'] is not None:  # noqa: E501
            query_params.append(('targetId', local_var_params['target_id']))  # noqa: E501
        if 'author_id' in local_var_params and local_var_params['author_id'] is not None:  # noqa: E501
            query_params.append(('authorId', local_var_params['author_id']))  # noqa: E501
        if 'author_role' in local_var_params and local_var_params['author_role'] is not None:  # noqa: E501
            query_params.append(('authorRole', local_var_params['author_role']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'sub_category' in local_var_params and local_var_params['sub_category'] is not None:  # noqa: E501
            query_params.append(('subCategory', local_var_params['sub_category']))  # noqa: E501
        if 'has_rating' in local_var_params and local_var_params['has_rating'] is not None:  # noqa: E501
            query_params.append(('hasRating', local_var_params['has_rating']))  # noqa: E501
        if 'has_comment' in local_var_params and local_var_params['has_comment'] is not None:  # noqa: E501
            query_params.append(('hasComment', local_var_params['has_comment']))  # noqa: E501
        if 'reply_requested' in local_var_params and local_var_params['reply_requested'] is not None:  # noqa: E501
            query_params.append(('replyRequested', local_var_params['reply_requested']))  # noqa: E501
        if 'moderated' in local_var_params and local_var_params['moderated'] is not None:  # noqa: E501
            query_params.append(('moderated', local_var_params['moderated']))  # noqa: E501
        if 'published' in local_var_params and local_var_params['published'] is not None:  # noqa: E501
            query_params.append(('published', local_var_params['published']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'x_ip_address' in local_var_params:
            header_params['x-ip-address'] = local_var_params['x_ip_address']  # noqa: E501
        if 'x_author_id' in local_var_params:
            header_params['x-author-id'] = local_var_params['x_author_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ratings/{targetNamespace}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ratings_targetnamespace_id(self, target_namespace, id, **kwargs):  # noqa: E501
        """Get rating.  # noqa: E501

        **Note:** Response is cached, but the cache is invalidated if the target's rating is modified in some way: update, delete or new rating. In practice this means that this endpoint returns up-to-date data.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ratings_targetnamespace_id(target_namespace, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str id: Target ID (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RatingsTargetNamespaceIdGet200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ratings_targetnamespace_id_with_http_info(target_namespace, id, **kwargs)  # noqa: E501

    def get_ratings_targetnamespace_id_with_http_info(self, target_namespace, id, **kwargs):  # noqa: E501
        """Get rating.  # noqa: E501

        **Note:** Response is cached, but the cache is invalidated if the target's rating is modified in some way: update, delete or new rating. In practice this means that this endpoint returns up-to-date data.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ratings_targetnamespace_id_with_http_info(target_namespace, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str id: Target ID (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RatingsTargetNamespaceIdGet200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['target_namespace', 'id', 'x_ip_address', 'x_author_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ratings_targetnamespace_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'target_namespace' is set
        if self.api_client.client_side_validation and ('target_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['target_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target_namespace` when calling `get_ratings_targetnamespace_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_ratings_targetnamespace_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_namespace' in local_var_params:
            path_params['targetNamespace'] = local_var_params['target_namespace']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ip_address' in local_var_params:
            header_params['x-ip-address'] = local_var_params['x_ip_address']  # noqa: E501
        if 'x_author_id' in local_var_params:
            header_params['x-author-id'] = local_var_params['x_author_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ratings/{targetNamespace}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingsTargetNamespaceIdGet200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_ratings_targetnamespace(self, target_namespace, **kwargs):  # noqa: E501
        """Create rating.  # noqa: E501

        The service needs authorId to prevent users from creating more than one rating for same target and also for other restrictions.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ratings_targetnamespace(target_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param Rating rating: Rating object
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RatingsTargetNamespacePost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_ratings_targetnamespace_with_http_info(target_namespace, **kwargs)  # noqa: E501

    def post_ratings_targetnamespace_with_http_info(self, target_namespace, **kwargs):  # noqa: E501
        """Create rating.  # noqa: E501

        The service needs authorId to prevent users from creating more than one rating for same target and also for other restrictions.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ratings_targetnamespace_with_http_info(target_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param Rating rating: Rating object
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RatingsTargetNamespacePost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['target_namespace', 'x_ip_address', 'x_author_id', 'rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_ratings_targetnamespace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'target_namespace' is set
        if self.api_client.client_side_validation and ('target_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['target_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target_namespace` when calling `post_ratings_targetnamespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_namespace' in local_var_params:
            path_params['targetNamespace'] = local_var_params['target_namespace']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ip_address' in local_var_params:
            header_params['x-ip-address'] = local_var_params['x_ip_address']  # noqa: E501
        if 'x_author_id' in local_var_params:
            header_params['x-author-id'] = local_var_params['x_author_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rating' in local_var_params:
            body_params = local_var_params['rating']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ratings/{targetNamespace}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingsTargetNamespacePost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_ratings_targetnamespace_id(self, target_namespace, id, **kwargs):  # noqa: E501
        """Update rating.  # noqa: E501

        Body of the request should be a full rating object.  **Note:** `targetNamespace` is being pulled from request body instead of url. That way it's also possible to update `targetNamespace`.  **Authorization:** Author x can't update author y's rating.  **Warning: You must send the full object on each PUT request. Fields which are not sent, will be considered as \"removed\" fields!**    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_ratings_targetnamespace_id(target_namespace, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str id: Target ID (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param Rating rating: Rating object
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RatingsTargetNamespaceIdPut200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.put_ratings_targetnamespace_id_with_http_info(target_namespace, id, **kwargs)  # noqa: E501

    def put_ratings_targetnamespace_id_with_http_info(self, target_namespace, id, **kwargs):  # noqa: E501
        """Update rating.  # noqa: E501

        Body of the request should be a full rating object.  **Note:** `targetNamespace` is being pulled from request body instead of url. That way it's also possible to update `targetNamespace`.  **Authorization:** Author x can't update author y's rating.  **Warning: You must send the full object on each PUT request. Fields which are not sent, will be considered as \"removed\" fields!**    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_ratings_targetnamespace_id_with_http_info(target_namespace, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str target_namespace: Target namespace (required)
        :param str id: Target ID (required)
        :param str x_ip_address: Tells the original requester's IP address to this API. It is needed for moderation purposes. Explained more in [the IP addresses section of the API documentation](../docs/API#ip-addresses). This value is important and should always be included, but isn't strictly required by the API. 
        :param str x_author_id: **Warning:** this ID should be SAME across all services using this rating service. Tells the original requester's user ID. This is used to restrict some actions. For example author with ID `265` should not be able to modify rating created by user with ID `318`. This value is important and should always be included, but isn't strictly required by the API. 
        :param Rating rating: Rating object
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RatingsTargetNamespaceIdPut200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['target_namespace', 'id', 'x_ip_address', 'x_author_id', 'rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_ratings_targetnamespace_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'target_namespace' is set
        if self.api_client.client_side_validation and ('target_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['target_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `target_namespace` when calling `put_ratings_targetnamespace_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `put_ratings_targetnamespace_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_namespace' in local_var_params:
            path_params['targetNamespace'] = local_var_params['target_namespace']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ip_address' in local_var_params:
            header_params['x-ip-address'] = local_var_params['x_ip_address']  # noqa: E501
        if 'x_author_id' in local_var_params:
            header_params['x-author-id'] = local_var_params['x_author_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rating' in local_var_params:
            body_params = local_var_params['rating']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ratings/{targetNamespace}/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingsTargetNamespaceIdPut200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
