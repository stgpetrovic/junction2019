# coding: utf-8

"""
    Pricing & Availability API

    Pricing & Availability API is a REST-like API which integrates to POS and knows up to date pricing and product availability data for each store. This service can also be used to create and fill temporary shopping baskets, that are kept for 24 hours before they are automatically deleted.    **NOTE:** The API returns money in the responses. You should NOT use that data for actual payment transactions. They are only meant for displaying purposes, but they should work well enough for hackathon purposes.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    Authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api.pricing.pricing.configuration import Configuration


class PromotionV4(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'int',
        'start_date': 'date',
        'end_date': 'date',
        'plussa': 'bool',
        'pricing_method': 'str',
        'price': 'float',
        'size': 'float',
        'rule': 'str',
        'basket': 'str',
        'baskets': 'list[PromotionV4AllOf1Baskets]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'plussa': 'plussa',
        'pricing_method': 'pricingMethod',
        'price': 'price',
        'size': 'size',
        'rule': 'rule',
        'basket': 'basket',
        'baskets': 'baskets'
    }

    def __init__(self, id=None, type=None, start_date=None, end_date=None, plussa=None, pricing_method=None, price=None, size=None, rule=None, basket=None, baskets=None, local_vars_configuration=None):  # noqa: E501
        """PromotionV4 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._start_date = None
        self._end_date = None
        self._plussa = None
        self._pricing_method = None
        self._price = None
        self._size = None
        self._rule = None
        self._basket = None
        self._baskets = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.start_date = start_date
        self.end_date = end_date
        self.plussa = plussa
        if pricing_method is not None:
            self.pricing_method = pricing_method
        if price is not None:
            self.price = price
        if size is not None:
            self.size = size
        if rule is not None:
            self.rule = rule
        if basket is not None:
            self.basket = basket
        if baskets is not None:
            self.baskets = baskets

    @property
    def id(self):
        """Gets the id of this PromotionV4.  # noqa: E501


        :return: The id of this PromotionV4.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromotionV4.


        :param id: The id of this PromotionV4.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this PromotionV4.  # noqa: E501


        :return: The type of this PromotionV4.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PromotionV4.


        :param type: The type of this PromotionV4.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def start_date(self):
        """Gets the start_date of this PromotionV4.  # noqa: E501


        :return: The start_date of this PromotionV4.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PromotionV4.


        :param start_date: The start_date of this PromotionV4.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this PromotionV4.  # noqa: E501


        :return: The end_date of this PromotionV4.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PromotionV4.


        :param end_date: The end_date of this PromotionV4.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and end_date is None:  # noqa: E501
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def plussa(self):
        """Gets the plussa of this PromotionV4.  # noqa: E501


        :return: The plussa of this PromotionV4.  # noqa: E501
        :rtype: bool
        """
        return self._plussa

    @plussa.setter
    def plussa(self, plussa):
        """Sets the plussa of this PromotionV4.


        :param plussa: The plussa of this PromotionV4.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and plussa is None:  # noqa: E501
            raise ValueError("Invalid value for `plussa`, must not be `None`")  # noqa: E501

        self._plussa = plussa

    @property
    def pricing_method(self):
        """Gets the pricing_method of this PromotionV4.  # noqa: E501


        :return: The pricing_method of this PromotionV4.  # noqa: E501
        :rtype: str
        """
        return self._pricing_method

    @pricing_method.setter
    def pricing_method(self, pricing_method):
        """Sets the pricing_method of this PromotionV4.


        :param pricing_method: The pricing_method of this PromotionV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["percentage", "net"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and pricing_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `pricing_method` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_method, allowed_values)
            )

        self._pricing_method = pricing_method

    @property
    def price(self):
        """Gets the price of this PromotionV4.  # noqa: E501


        :return: The price of this PromotionV4.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PromotionV4.


        :param price: The price of this PromotionV4.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def size(self):
        """Gets the size of this PromotionV4.  # noqa: E501


        :return: The size of this PromotionV4.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PromotionV4.


        :param size: The size of this PromotionV4.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def rule(self):
        """Gets the rule of this PromotionV4.  # noqa: E501


        :return: The rule of this PromotionV4.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this PromotionV4.


        :param rule: The rule of this PromotionV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["min", "max", "simple", "batch", "set"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and rule not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `rule` ({0}), must be one of {1}"  # noqa: E501
                .format(rule, allowed_values)
            )

        self._rule = rule

    @property
    def basket(self):
        """Gets the basket of this PromotionV4.  # noqa: E501


        :return: The basket of this PromotionV4.  # noqa: E501
        :rtype: str
        """
        return self._basket

    @basket.setter
    def basket(self, basket):
        """Sets the basket of this PromotionV4.


        :param basket: The basket of this PromotionV4.  # noqa: E501
        :type: str
        """

        self._basket = basket

    @property
    def baskets(self):
        """Gets the baskets of this PromotionV4.  # noqa: E501


        :return: The baskets of this PromotionV4.  # noqa: E501
        :rtype: list[PromotionV4AllOf1Baskets]
        """
        return self._baskets

    @baskets.setter
    def baskets(self, baskets):
        """Sets the baskets of this PromotionV4.


        :param baskets: The baskets of this PromotionV4.  # noqa: E501
        :type: list[PromotionV4AllOf1Baskets]
        """

        self._baskets = baskets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionV4):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PromotionV4):
            return True

        return self.to_dict() != other.to_dict()
