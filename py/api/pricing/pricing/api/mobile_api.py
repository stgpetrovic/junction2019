# coding: utf-8

"""
    Pricing & Availability API

    Pricing & Availability API is a REST-like API which integrates to POS and knows up to date pricing and product availability data for each store. This service can also be used to create and fill temporary shopping baskets, that are kept for 24 hours before they are automatically deleted.    **NOTE:** The API returns money in the responses. You should NOT use that data for actual payment transactions. They are only meant for displaying purposes, but they should work well enough for hackathon purposes.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    Authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from api.pricing.pricing.api_client import ApiClient
from api.pricing.pricing.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MobileApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_baskets_longbasketid(self, long_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Delete shopping basket.  # noqa: E501

        Delete shopping basket.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_baskets_longbasketid(long_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_baskets_longbasketid_with_http_info(long_basket_id, x_basket_token, **kwargs)  # noqa: E501

    def delete_baskets_longbasketid_with_http_info(self, long_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Delete shopping basket.  # noqa: E501

        Delete shopping basket.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_baskets_longbasketid_with_http_info(long_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['long_basket_id', 'x_basket_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_baskets_longbasketid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'long_basket_id' is set
        if self.api_client.client_side_validation and ('long_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['long_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `long_basket_id` when calling `delete_baskets_longbasketid`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `delete_baskets_longbasketid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'long_basket_id' in local_var_params:
            path_params['longBasketId'] = local_var_params['long_basket_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{longBasketId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_baskets_longbasketid_items_itemid(self, long_basket_id, item_id, x_basket_token, **kwargs):  # noqa: E501
        """Remove item from shopping basket.  # noqa: E501

        Remove item from shopping basket.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_baskets_longbasketid_items_itemid(long_basket_id, item_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param int item_id: Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.  (required)
        :param str x_basket_token: Basket authorization token from basket creation response (required)
        :param bool include_promotion_details:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsLongBasketIdItemsItemIdDelete200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_baskets_longbasketid_items_itemid_with_http_info(long_basket_id, item_id, x_basket_token, **kwargs)  # noqa: E501

    def delete_baskets_longbasketid_items_itemid_with_http_info(self, long_basket_id, item_id, x_basket_token, **kwargs):  # noqa: E501
        """Remove item from shopping basket.  # noqa: E501

        Remove item from shopping basket.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_baskets_longbasketid_items_itemid_with_http_info(long_basket_id, item_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param int item_id: Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.  (required)
        :param str x_basket_token: Basket authorization token from basket creation response (required)
        :param bool include_promotion_details:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsLongBasketIdItemsItemIdDelete200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['long_basket_id', 'item_id', 'x_basket_token', 'include_promotion_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_baskets_longbasketid_items_itemid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'long_basket_id' is set
        if self.api_client.client_side_validation and ('long_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['long_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `long_basket_id` when calling `delete_baskets_longbasketid_items_itemid`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `delete_baskets_longbasketid_items_itemid`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `delete_baskets_longbasketid_items_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'long_basket_id' in local_var_params:
            path_params['longBasketId'] = local_var_params['long_basket_id']  # noqa: E501
        if 'item_id' in local_var_params:
            path_params['itemId'] = local_var_params['item_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{longBasketId}/items/{itemId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsLongBasketIdItemsItemIdDelete200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_baskets_longbasketid(self, long_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Get shopping basket information with long id.  # noqa: E501

        Get shopping basket information with long id.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baskets_longbasketid(long_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token  (required)
        :param bool include_promotion_details:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsLongBasketIdGet200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_baskets_longbasketid_with_http_info(long_basket_id, x_basket_token, **kwargs)  # noqa: E501

    def get_baskets_longbasketid_with_http_info(self, long_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Get shopping basket information with long id.  # noqa: E501

        Get shopping basket information with long id.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baskets_longbasketid_with_http_info(long_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token  (required)
        :param bool include_promotion_details:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsLongBasketIdGet200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['long_basket_id', 'x_basket_token', 'include_promotion_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_baskets_longbasketid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'long_basket_id' is set
        if self.api_client.client_side_validation and ('long_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['long_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `long_basket_id` when calling `get_baskets_longbasketid`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `get_baskets_longbasketid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'long_basket_id' in local_var_params:
            path_params['longBasketId'] = local_var_params['long_basket_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{longBasketId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsLongBasketIdGet200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_baskets_store_storeid_shortbasketid(self, store_id, short_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Get shopping basket information for store with short id.  # noqa: E501

        Get shopping basket information for store with short id.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baskets_store_storeid_shortbasketid(store_id, short_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param str short_basket_id: Short id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token (required)
        :param bool include_promotion_details:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsStoreStoreIdShortBasketIdGet200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_baskets_store_storeid_shortbasketid_with_http_info(store_id, short_basket_id, x_basket_token, **kwargs)  # noqa: E501

    def get_baskets_store_storeid_shortbasketid_with_http_info(self, store_id, short_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Get shopping basket information for store with short id.  # noqa: E501

        Get shopping basket information for store with short id.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baskets_store_storeid_shortbasketid_with_http_info(store_id, short_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param str short_basket_id: Short id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token (required)
        :param bool include_promotion_details:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsStoreStoreIdShortBasketIdGet200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'short_basket_id', 'x_basket_token', 'include_promotion_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_baskets_store_storeid_shortbasketid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `get_baskets_store_storeid_shortbasketid`")  # noqa: E501
        # verify the required parameter 'short_basket_id' is set
        if self.api_client.client_side_validation and ('short_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['short_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `short_basket_id` when calling `get_baskets_store_storeid_shortbasketid`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `get_baskets_store_storeid_shortbasketid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['storeId'] = local_var_params['store_id']  # noqa: E501
        if 'short_basket_id' in local_var_params:
            path_params['shortBasketId'] = local_var_params['short_basket_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/store/{storeId}/{shortBasketId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsStoreStoreIdShortBasketIdGet200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_products_storeid_ean(self, store_id, ean, **kwargs):  # noqa: E501
        """Get info for a single product.  # noqa: E501

        Get info for a single product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_storeid_ean(store_id, ean, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param str ean: EAN code of the product (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ProductsStoreIdEanGet200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_products_storeid_ean_with_http_info(store_id, ean, **kwargs)  # noqa: E501

    def get_products_storeid_ean_with_http_info(self, store_id, ean, **kwargs):  # noqa: E501
        """Get info for a single product.  # noqa: E501

        Get info for a single product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_storeid_ean_with_http_info(store_id, ean, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param str ean: EAN code of the product (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ProductsStoreIdEanGet200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'ean']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_storeid_ean" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `get_products_storeid_ean`")  # noqa: E501
        # verify the required parameter 'ean' is set
        if self.api_client.client_side_validation and ('ean' not in local_var_params or  # noqa: E501
                                                        local_var_params['ean'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ean` when calling `get_products_storeid_ean`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['storeId'] = local_var_params['store_id']  # noqa: E501
        if 'ean' in local_var_params:
            path_params['ean'] = local_var_params['ean']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/products/{storeId}/{ean}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsStoreIdEanGet200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_baskets_longbasketid_items_itemid(self, long_basket_id, item_id, x_basket_token, **kwargs):  # noqa: E501
        """Update an item in shopping basket.  # noqa: E501

        ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***    This can be used to update the meta data of an item in basket. You are not allowed to change the actual content of the item. That is enforced by allowing only partial basket item objects in write operations.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_baskets_longbasketid_items_itemid(long_basket_id, item_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param int item_id: Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.  (required)
        :param str x_basket_token: Basket authorization token, returned from basket creation request (required)
        :param bool include_promotion_details:
        :param Item item: Item object. This object also specifies the multiplier of items added.  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsLongBasketIdItemsItemIdPatch200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_baskets_longbasketid_items_itemid_with_http_info(long_basket_id, item_id, x_basket_token, **kwargs)  # noqa: E501

    def patch_baskets_longbasketid_items_itemid_with_http_info(self, long_basket_id, item_id, x_basket_token, **kwargs):  # noqa: E501
        """Update an item in shopping basket.  # noqa: E501

        ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***    This can be used to update the meta data of an item in basket. You are not allowed to change the actual content of the item. That is enforced by allowing only partial basket item objects in write operations.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_baskets_longbasketid_items_itemid_with_http_info(long_basket_id, item_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param int item_id: Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.  (required)
        :param str x_basket_token: Basket authorization token, returned from basket creation request (required)
        :param bool include_promotion_details:
        :param Item item: Item object. This object also specifies the multiplier of items added.  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsLongBasketIdItemsItemIdPatch200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['long_basket_id', 'item_id', 'x_basket_token', 'include_promotion_details', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_baskets_longbasketid_items_itemid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'long_basket_id' is set
        if self.api_client.client_side_validation and ('long_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['long_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `long_basket_id` when calling `patch_baskets_longbasketid_items_itemid`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `patch_baskets_longbasketid_items_itemid`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `patch_baskets_longbasketid_items_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'long_basket_id' in local_var_params:
            path_params['longBasketId'] = local_var_params['long_basket_id']  # noqa: E501
        if 'item_id' in local_var_params:
            path_params['itemId'] = local_var_params['item_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in local_var_params:
            body_params = local_var_params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{longBasketId}/items/{itemId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsLongBasketIdItemsItemIdPatch200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_baskets_storeid(self, store_id, **kwargs):  # noqa: E501
        """Creates a new shopping basket for a certain store.  # noqa: E501

        Body of the request should be empty. The basket is deleted after 24 hours!    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_baskets_storeid(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param bool include_promotion_details:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsStoreIdPost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_baskets_storeid_with_http_info(store_id, **kwargs)  # noqa: E501

    def post_baskets_storeid_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Creates a new shopping basket for a certain store.  # noqa: E501

        Body of the request should be empty. The basket is deleted after 24 hours!    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_baskets_storeid_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param bool include_promotion_details:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsStoreIdPost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'include_promotion_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_baskets_storeid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `post_baskets_storeid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['storeId'] = local_var_params['store_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{storeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsStoreIdPost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_products_storeid(self, store_id, **kwargs):  # noqa: E501
        """Get information for multiple products at once.  # noqa: E501

        Get information for multiple products at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_products_storeid(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param Eans eans:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_products_storeid_with_http_info(store_id, **kwargs)  # noqa: E501

    def post_products_storeid_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Get information for multiple products at once.  # noqa: E501

        Get information for multiple products at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_products_storeid_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str store_id: Store id, for example C122. (required)
        :param Eans eans:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['store_id', 'eans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_products_storeid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'store_id' is set
        if self.api_client.client_side_validation and ('store_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['store_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `store_id` when calling `post_products_storeid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in local_var_params:
            path_params['storeId'] = local_var_params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'eans' in local_var_params:
            body_params = local_var_params['eans']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/products/{storeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_baskets_longbasketid_items(self, long_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Add multiple items to the shopping basket at once.  # noqa: E501

        Sets an array of items as the content of the basket. The first item in the array will have an item id of 0, the second one will have 1 and so on.  Existing items in the basket are replaced if a supplied item has the same id, but otherwise items already existing in the basket will not be touched.  Endpoint validation allows for items with empty EAN-codes or items with multipliers of zero. Such items won't be added to the basket and will be skipped and logged.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_baskets_longbasketid_items(long_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token (required)
        :param bool include_promotion_details:
        :param Payload payload: Bulk item object containing multiple partial basket item objects.  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsLongBasketIdItemsPut200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.put_baskets_longbasketid_items_with_http_info(long_basket_id, x_basket_token, **kwargs)  # noqa: E501

    def put_baskets_longbasketid_items_with_http_info(self, long_basket_id, x_basket_token, **kwargs):  # noqa: E501
        """Add multiple items to the shopping basket at once.  # noqa: E501

        Sets an array of items as the content of the basket. The first item in the array will have an item id of 0, the second one will have 1 and so on.  Existing items in the basket are replaced if a supplied item has the same id, but otherwise items already existing in the basket will not be touched.  Endpoint validation allows for items with empty EAN-codes or items with multipliers of zero. Such items won't be added to the basket and will be skipped and logged.    ** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_baskets_longbasketid_items_with_http_info(long_basket_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param str x_basket_token: Basket authorization token (required)
        :param bool include_promotion_details:
        :param Payload payload: Bulk item object containing multiple partial basket item objects.  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsLongBasketIdItemsPut200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['long_basket_id', 'x_basket_token', 'include_promotion_details', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_baskets_longbasketid_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'long_basket_id' is set
        if self.api_client.client_side_validation and ('long_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['long_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `long_basket_id` when calling `put_baskets_longbasketid_items`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `put_baskets_longbasketid_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'long_basket_id' in local_var_params:
            path_params['longBasketId'] = local_var_params['long_basket_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in local_var_params:
            body_params = local_var_params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{longBasketId}/items', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsLongBasketIdItemsPut200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_baskets_longbasketid_items_itemid(self, long_basket_id, item_id, x_basket_token, **kwargs):  # noqa: E501
        """Create a new item to shopping basket.  # noqa: E501

        It is up to the client to generate and handle the basket item id.    ** NOTE: This endpoint requires `x-basket-token` header value. The token is returned by the basket creation request. Otherwise the API will return 403 error. ***    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_baskets_longbasketid_items_itemid(long_basket_id, item_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param int item_id: Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.  (required)
        :param str x_basket_token: Basket authorization token (required)
        :param bool include_promotion_details:
        :param Item item: Item object. This object also specifies the multiplier of items added.  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BasketsLongBasketIdItemsItemIdPut200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.put_baskets_longbasketid_items_itemid_with_http_info(long_basket_id, item_id, x_basket_token, **kwargs)  # noqa: E501

    def put_baskets_longbasketid_items_itemid_with_http_info(self, long_basket_id, item_id, x_basket_token, **kwargs):  # noqa: E501
        """Create a new item to shopping basket.  # noqa: E501

        It is up to the client to generate and handle the basket item id.    ** NOTE: This endpoint requires `x-basket-token` header value. The token is returned by the basket creation request. Otherwise the API will return 403 error. ***    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_baskets_longbasketid_items_itemid_with_http_info(long_basket_id, item_id, x_basket_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str long_basket_id: Long id of the shopping basket (required)
        :param int item_id: Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.  (required)
        :param str x_basket_token: Basket authorization token (required)
        :param bool include_promotion_details:
        :param Item item: Item object. This object also specifies the multiplier of items added.  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BasketsLongBasketIdItemsItemIdPut200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['long_basket_id', 'item_id', 'x_basket_token', 'include_promotion_details', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_baskets_longbasketid_items_itemid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'long_basket_id' is set
        if self.api_client.client_side_validation and ('long_basket_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['long_basket_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `long_basket_id` when calling `put_baskets_longbasketid_items_itemid`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `put_baskets_longbasketid_items_itemid`")  # noqa: E501
        # verify the required parameter 'x_basket_token' is set
        if self.api_client.client_side_validation and ('x_basket_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_basket_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_basket_token` when calling `put_baskets_longbasketid_items_itemid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'long_basket_id' in local_var_params:
            path_params['longBasketId'] = local_var_params['long_basket_id']  # noqa: E501
        if 'item_id' in local_var_params:
            path_params['itemId'] = local_var_params['item_id']  # noqa: E501

        query_params = []
        if 'include_promotion_details' in local_var_params and local_var_params['include_promotion_details'] is not None:  # noqa: E501
            query_params.append(('includePromotionDetails', local_var_params['include_promotion_details']))  # noqa: E501

        header_params = {}
        if 'x_basket_token' in local_var_params:
            header_params['x-basket-token'] = local_var_params['x_basket_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in local_var_params:
            body_params = local_var_params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/baskets/{longBasketId}/items/{itemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasketsLongBasketIdItemsItemIdPut200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
