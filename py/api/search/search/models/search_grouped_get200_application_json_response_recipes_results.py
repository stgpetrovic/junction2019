# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api.search.search.configuration import Configuration


class SearchGroupedGet200ApplicationJsonResponseRecipesResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'id': 'str',
        'name': 'str',
        'url': 'str',
        'url_slug': 'str',
        'piece_size': 'RecipePieceSize',
        'portion_cost': 'str',
        'portions': 'RecipePortions',
        'preparation_time': 'RecipePreparationTime',
        'categories': 'list[RecipeCategories]',
        'pictures': 'list[str]',
        'picture_urls': 'list[RecipePictureUrls]',
        'video_url': 'str',
        'video_embed_url': 'str',
        'trend_words': 'list[RecipeTrendWords]',
        'special_diets': 'list[RecipeSpecialDiets]',
        'energy_amounts': 'RecipeEnergyAmounts',
        'ingredients': 'list[RecipeIngredients]',
        'instructions': 'str',
        'end_note': 'str',
        'description': 'str',
        'date_created': 'date',
        'tv_date': 'date',
        'date_modified': 'date',
        'recipe_use': 'RecipeRecipeUse',
        'stamp': 'RecipeStamp',
        'sort': 'list[float]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'id': 'Id',
        'name': 'Name',
        'url': 'Url',
        'url_slug': 'UrlSlug',
        'piece_size': 'PieceSize',
        'portion_cost': 'PortionCost',
        'portions': 'Portions',
        'preparation_time': 'PreparationTime',
        'categories': 'Categories',
        'pictures': 'Pictures',
        'picture_urls': 'PictureUrls',
        'video_url': 'VideoUrl',
        'video_embed_url': 'VideoEmbedUrl',
        'trend_words': 'TrendWords',
        'special_diets': 'SpecialDiets',
        'energy_amounts': 'EnergyAmounts',
        'ingredients': 'Ingredients',
        'instructions': 'Instructions',
        'end_note': 'EndNote',
        'description': 'Description',
        'date_created': 'DateCreated',
        'tv_date': 'TvDate',
        'date_modified': 'DateModified',
        'recipe_use': 'RecipeUse',
        'stamp': 'Stamp',
        'sort': 'Sort'
    }

    def __init__(self, resource_type=None, id=None, name=None, url=None, url_slug=None, piece_size=None, portion_cost=None, portions=None, preparation_time=None, categories=None, pictures=None, picture_urls=None, video_url=None, video_embed_url=None, trend_words=None, special_diets=None, energy_amounts=None, ingredients=None, instructions=None, end_note=None, description=None, date_created=None, tv_date=None, date_modified=None, recipe_use=None, stamp=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """SearchGroupedGet200ApplicationJsonResponseRecipesResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._id = None
        self._name = None
        self._url = None
        self._url_slug = None
        self._piece_size = None
        self._portion_cost = None
        self._portions = None
        self._preparation_time = None
        self._categories = None
        self._pictures = None
        self._picture_urls = None
        self._video_url = None
        self._video_embed_url = None
        self._trend_words = None
        self._special_diets = None
        self._energy_amounts = None
        self._ingredients = None
        self._instructions = None
        self._end_note = None
        self._description = None
        self._date_created = None
        self._tv_date = None
        self._date_modified = None
        self._recipe_use = None
        self._stamp = None
        self._sort = None
        self.discriminator = None

        self.resource_type = resource_type
        self.id = id
        self.name = name
        self.url = url
        self.url_slug = url_slug
        if piece_size is not None:
            self.piece_size = piece_size
        self.portion_cost = portion_cost
        if portions is not None:
            self.portions = portions
        if preparation_time is not None:
            self.preparation_time = preparation_time
        self.categories = categories
        if pictures is not None:
            self.pictures = pictures
        if picture_urls is not None:
            self.picture_urls = picture_urls
        self.video_url = video_url
        self.video_embed_url = video_embed_url
        self.trend_words = trend_words
        self.special_diets = special_diets
        self.energy_amounts = energy_amounts
        self.ingredients = ingredients
        self.instructions = instructions
        self.end_note = end_note
        self.description = description
        if date_created is not None:
            self.date_created = date_created
        if tv_date is not None:
            self.tv_date = tv_date
        if date_modified is not None:
            self.date_modified = date_modified
        if recipe_use is not None:
            self.recipe_use = recipe_use
        if stamp is not None:
            self.stamp = stamp
        self.sort = sort

    @property
    def resource_type(self):
        """Gets the resource_type of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The resource_type of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param resource_type: The resource_type of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["recipe"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def id(self):
        """Gets the id of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Recipe identifier  # noqa: E501

        :return: The id of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Recipe identifier  # noqa: E501

        :param id: The id of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Recipe name  # noqa: E501

        :return: The name of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Recipe name  # noqa: E501

        :param name: The name of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Recipe url in k-ruoka.fi  # noqa: E501

        :return: The url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Recipe url in k-ruoka.fi  # noqa: E501

        :param url: The url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def url_slug(self):
        """Gets the url_slug of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Recipe url slug  # noqa: E501

        :return: The url_slug of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Recipe url slug  # noqa: E501

        :param url_slug: The url_slug of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `url_slug`, must not be `None`")  # noqa: E501

        self._url_slug = url_slug

    @property
    def piece_size(self):
        """Gets the piece_size of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The piece_size of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: RecipePieceSize
        """
        return self._piece_size

    @piece_size.setter
    def piece_size(self, piece_size):
        """Sets the piece_size of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param piece_size: The piece_size of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: RecipePieceSize
        """

        self._piece_size = piece_size

    @property
    def portion_cost(self):
        """Gets the portion_cost of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Cost per portion in Euros  # noqa: E501

        :return: The portion_cost of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._portion_cost

    @portion_cost.setter
    def portion_cost(self, portion_cost):
        """Sets the portion_cost of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Cost per portion in Euros  # noqa: E501

        :param portion_cost: The portion_cost of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and portion_cost is None:  # noqa: E501
            raise ValueError("Invalid value for `portion_cost`, must not be `None`")  # noqa: E501

        self._portion_cost = portion_cost

    @property
    def portions(self):
        """Gets the portions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The portions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: RecipePortions
        """
        return self._portions

    @portions.setter
    def portions(self, portions):
        """Sets the portions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param portions: The portions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: RecipePortions
        """

        self._portions = portions

    @property
    def preparation_time(self):
        """Gets the preparation_time of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The preparation_time of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: RecipePreparationTime
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param preparation_time: The preparation_time of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: RecipePreparationTime
        """

        self._preparation_time = preparation_time

    @property
    def categories(self):
        """Gets the categories of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The categories of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[RecipeCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param categories: The categories of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[RecipeCategories]
        """
        if self.local_vars_configuration.client_side_validation and categories is None:  # noqa: E501
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def pictures(self):
        """Gets the pictures of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Array of recipe picture ids  # noqa: E501

        :return: The pictures of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Array of recipe picture ids  # noqa: E501

        :param pictures: The pictures of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[str]
        """

        self._pictures = pictures

    @property
    def picture_urls(self):
        """Gets the picture_urls of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The picture_urls of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[RecipePictureUrls]
        """
        return self._picture_urls

    @picture_urls.setter
    def picture_urls(self, picture_urls):
        """Sets the picture_urls of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param picture_urls: The picture_urls of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[RecipePictureUrls]
        """

        self._picture_urls = picture_urls

    @property
    def video_url(self):
        """Gets the video_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The video_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param video_url: The video_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and video_url is None:  # noqa: E501
            raise ValueError("Invalid value for `video_url`, must not be `None`")  # noqa: E501

        self._video_url = video_url

    @property
    def video_embed_url(self):
        """Gets the video_embed_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The video_embed_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._video_embed_url

    @video_embed_url.setter
    def video_embed_url(self, video_embed_url):
        """Sets the video_embed_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param video_embed_url: The video_embed_url of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and video_embed_url is None:  # noqa: E501
            raise ValueError("Invalid value for `video_embed_url`, must not be `None`")  # noqa: E501

        self._video_embed_url = video_embed_url

    @property
    def trend_words(self):
        """Gets the trend_words of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The trend_words of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[RecipeTrendWords]
        """
        return self._trend_words

    @trend_words.setter
    def trend_words(self, trend_words):
        """Sets the trend_words of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param trend_words: The trend_words of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[RecipeTrendWords]
        """
        if self.local_vars_configuration.client_side_validation and trend_words is None:  # noqa: E501
            raise ValueError("Invalid value for `trend_words`, must not be `None`")  # noqa: E501

        self._trend_words = trend_words

    @property
    def special_diets(self):
        """Gets the special_diets of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The special_diets of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[RecipeSpecialDiets]
        """
        return self._special_diets

    @special_diets.setter
    def special_diets(self, special_diets):
        """Sets the special_diets of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param special_diets: The special_diets of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[RecipeSpecialDiets]
        """
        if self.local_vars_configuration.client_side_validation and special_diets is None:  # noqa: E501
            raise ValueError("Invalid value for `special_diets`, must not be `None`")  # noqa: E501

        self._special_diets = special_diets

    @property
    def energy_amounts(self):
        """Gets the energy_amounts of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The energy_amounts of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: RecipeEnergyAmounts
        """
        return self._energy_amounts

    @energy_amounts.setter
    def energy_amounts(self, energy_amounts):
        """Sets the energy_amounts of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param energy_amounts: The energy_amounts of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: RecipeEnergyAmounts
        """
        if self.local_vars_configuration.client_side_validation and energy_amounts is None:  # noqa: E501
            raise ValueError("Invalid value for `energy_amounts`, must not be `None`")  # noqa: E501

        self._energy_amounts = energy_amounts

    @property
    def ingredients(self):
        """Gets the ingredients of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The ingredients of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[RecipeIngredients]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param ingredients: The ingredients of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[RecipeIngredients]
        """
        if self.local_vars_configuration.client_side_validation and ingredients is None:  # noqa: E501
            raise ValueError("Invalid value for `ingredients`, must not be `None`")  # noqa: E501

        self._ingredients = ingredients

    @property
    def instructions(self):
        """Gets the instructions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Preparation instructions  # noqa: E501

        :return: The instructions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Preparation instructions  # noqa: E501

        :param instructions: The instructions of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instructions is None:  # noqa: E501
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions

    @property
    def end_note(self):
        """Gets the end_note of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Short note about the recipe  # noqa: E501

        :return: The end_note of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._end_note

    @end_note.setter
    def end_note(self, end_note):
        """Sets the end_note of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Short note about the recipe  # noqa: E501

        :param end_note: The end_note of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and end_note is None:  # noqa: E501
            raise ValueError("Invalid value for `end_note`, must not be `None`")  # noqa: E501

        self._end_note = end_note

    @property
    def description(self):
        """Gets the description of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Recipe description  # noqa: E501

        :return: The description of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Recipe description  # noqa: E501

        :param description: The description of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def date_created(self):
        """Gets the date_created of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Creation date and time  # noqa: E501

        :return: The date_created of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: date
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Creation date and time  # noqa: E501

        :param date_created: The date_created of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: date
        """

        self._date_created = date_created

    @property
    def tv_date(self):
        """Gets the tv_date of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        MitÃ¤ tÃ¤nÃ¤Ã¤n syÃ¶tÃ¤isiin TV date  # noqa: E501

        :return: The tv_date of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: date
        """
        return self._tv_date

    @tv_date.setter
    def tv_date(self, tv_date):
        """Sets the tv_date of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        MitÃ¤ tÃ¤nÃ¤Ã¤n syÃ¶tÃ¤isiin TV date  # noqa: E501

        :param tv_date: The tv_date of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: date
        """

        self._tv_date = tv_date

    @property
    def date_modified(self):
        """Gets the date_modified of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Modification date and time  # noqa: E501

        :return: The date_modified of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: date
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Modification date and time  # noqa: E501

        :param date_modified: The date_modified of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: date
        """

        self._date_modified = date_modified

    @property
    def recipe_use(self):
        """Gets the recipe_use of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The recipe_use of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: RecipeRecipeUse
        """
        return self._recipe_use

    @recipe_use.setter
    def recipe_use(self, recipe_use):
        """Sets the recipe_use of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param recipe_use: The recipe_use of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: RecipeRecipeUse
        """

        self._recipe_use = recipe_use

    @property
    def stamp(self):
        """Gets the stamp of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501


        :return: The stamp of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: RecipeStamp
        """
        return self._stamp

    @stamp.setter
    def stamp(self, stamp):
        """Sets the stamp of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.


        :param stamp: The stamp of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: RecipeStamp
        """

        self._stamp = stamp

    @property
    def sort(self):
        """Gets the sort of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501

        Recipe search results are always sorted primarily based on relevance score. Secondary sorting parameter is the id of the recipe, largest id first. Id sorting tries to return newest recipes first. Sort array contains information about search parametes, first index is the relevance score, second the Id of the recipe.   # noqa: E501

        :return: The sort of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :rtype: list[float]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.

        Recipe search results are always sorted primarily based on relevance score. Secondary sorting parameter is the id of the recipe, largest id first. Id sorting tries to return newest recipes first. Sort array contains information about search parametes, first index is the relevance score, second the Id of the recipe.   # noqa: E501

        :param sort: The sort of this SearchGroupedGet200ApplicationJsonResponseRecipesResults.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and sort is None:  # noqa: E501
            raise ValueError("Invalid value for `sort`, must not be `None`")  # noqa: E501

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchGroupedGet200ApplicationJsonResponseRecipesResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchGroupedGet200ApplicationJsonResponseRecipesResults):
            return True

        return self.to_dict() != other.to_dict()
