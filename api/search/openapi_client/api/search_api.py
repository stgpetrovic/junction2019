# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_search_articles(self, **kwargs):  # noqa: E501
        """Article search.  # noqa: E501

        API for searching article data.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_articles(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    Normal request, where possible `filters` are:    * `ids` *Boolean filter* A Number or an Array of Numbers defining the stores that are included in the search.  * `url` *Boolean filter* A String or an Array of Strings defining the article urls that are included in the search.  * `category` *Boolean filter* An Object defining what article categories should be included.    * `category.id` A String or an Array of Strings representing id values of categories. These are usually small integers presented as Strings.    * `category.title` A String or an Array of String representing category names.  * `slug` *Boolean filter* A String or an Array of Strings defining the article slugs that are included in the search.    Possible `sortOrders` are:  * `publishDate` Article search results can be sorted by publishing date, showing latest publishing dates first. The structure of the object has to be  ```  {    \"name\": \"publishDate\"  }  ```  * Sort by custom priority. Results can be sorted by using priority list where each article can be given a specific priority number. Default priority is 0. It is given for articles missing from the list. The larger the number, the higher the priority. Articles with equal numbers are sorted by relevance. Articles whose priority is less than 0 are last in the search results, i.e. after articles that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"9808\", \"priority\": 5 }, // first result      { \"id\": \"40308\", \"priority\": -1 } // last result    ]  }  ```  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchArticlesPost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_search_articles_with_http_info(**kwargs)  # noqa: E501

    def post_search_articles_with_http_info(self, **kwargs):  # noqa: E501
        """Article search.  # noqa: E501

        API for searching article data.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_articles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    Normal request, where possible `filters` are:    * `ids` *Boolean filter* A Number or an Array of Numbers defining the stores that are included in the search.  * `url` *Boolean filter* A String or an Array of Strings defining the article urls that are included in the search.  * `category` *Boolean filter* An Object defining what article categories should be included.    * `category.id` A String or an Array of Strings representing id values of categories. These are usually small integers presented as Strings.    * `category.title` A String or an Array of String representing category names.  * `slug` *Boolean filter* A String or an Array of Strings defining the article slugs that are included in the search.    Possible `sortOrders` are:  * `publishDate` Article search results can be sorted by publishing date, showing latest publishing dates first. The structure of the object has to be  ```  {    \"name\": \"publishDate\"  }  ```  * Sort by custom priority. Results can be sorted by using priority list where each article can be given a specific priority number. Default priority is 0. It is given for articles missing from the list. The larger the number, the higher the priority. Articles with equal numbers are sorted by relevance. Articles whose priority is less than 0 are last in the search results, i.e. after articles that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"9808\", \"priority\": 5 }, // first result      { \"id\": \"40308\", \"priority\": -1 } // last result    ]  }  ```  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchArticlesPost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_articles" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in local_var_params:
            body_params = local_var_params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/search/articles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchArticlesPost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_search_offers(self, **kwargs):  # noqa: E501
        """Offer search.  # noqa: E501

        API for searching offers and products linked to them. <br><br> Any prices listed by this API should not be used in any monetary transactions or price calculations, but they can be used for display purposes. The price data returned by this API is also the only way to display future offer prices not active at the moment.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_offers(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `ids` *Boolean filter* A String or an Array of Strings defining the offers that are included in the search.  * `chainId` *Boolean filter* A String or an Array of Strings defining which store chains' offers are included in the search. Possible values are 'kcitymarket', 'ksupermarket', 'kmarket' and 'nokm'. If `chainId`  filter is not used, request returns offers from all chains.  * `storeId` *Boolean filter* A String or an Array of Strings defining which stores' offers are included in the search.  * `category` *Boolean filter* A String or an Array of Strings defining which  offer categories are included in the search.    Possible values for offer `category` filter are:    | Id       | Title                                   |  |----------|-----------------------------------------|  | \"8734\"   | \"KÃ¤rkitarjous\"                          |  | \"8735\"   | \"Elintarviketarjous\"                    |  | \"8736\"   | \"Plussa-tarjous\"                        |  | \"8737\"   | \"Pirkka-tarjous\"                        |  | \"8739\"   | \"TULI KUUMA -tarjous (KCM)\"             |  | \"8740\"   | \"SynttÃ¤ri-tarjous (KSM)\"                |  | \"8744\"   | \"Sinivalkoinen-tarjous\"                 |  | \"8998\"   | \"Pieneen hintaan -tarjous (KM)\"         |  | \"9522\"   | \"KÃ¤yttÃ¶tavaratarjous\"                   |  | \"9525\"   | \"Maito juusto munat ja rasvat -tarjous\" |  | \"9526\"   | \"Lihat ja kalat -tarjous\"               |  | \"9527\"   | \"HedelmÃ¤t ja vihannekset -tarjous\"      |  | \"9524\"   | \"Valmisruoka-tarjous\"                   |  | \"9528\"   | \"LeivÃ¤t keksit ja leivonnaiset -tarjous\"|  | \"9529\"   | \"Makeiset ja naposteltavat -tarjous\"    |  | \"9530\"   | \"Juomat-tarjous\"                        |  | \"9531\"   | \"Kodintarvikkeet-tarjous\"               |  | \"9532\"   | \"Pakasteet-tarjous\"                     |  | \"9533\"   | \"Maustaminen ja leivonta -tarjous\"      |  | \"9534\"   | \"Pastat riisit ja sÃ¤ilykkeet -tarjous\"  |  | \"9536\"   | \"Hygienian tarjous\"                     |  | \"9540\"   | \"Sisustuksen tarjous\"                   |  | \"9551\"   | \"Sisustustekstiilitarjous\"              |  | \"9541\"   | \"Vuodetekstiilitarjous\"                 |  | \"9542\"   | \"Ruuanlaiton tarjous\"                   |  | \"9544\"   | \"Vapaa-ajan tarjous\"                    |  | \"9545\"   | \"Viihteen tarjous\"                      |  | \"9546\"   | \"Lelutarjous\"                           |  | \"9547\"   | \"Urheilutarjous\"                        |  | \"9548\"   | \"TV-tarjous\"                            |  | \"9549\"   | \"Tietotekniikkatarjous\"                 |  | \"9550\"   | \"Kameratarjous\"                         |  | \"11117\"  | \"K-menu-tarjous\"                        |  | \"11643\"  | \"TÃ¤stÃ¤ ilmoitimme -tarjous (KSM)\"       |  | \"11966\"  | \"Hintaralli-tarjous ET (KCM)\"           |  | \"39044\"  | \"Neste Oil K-market Motorest\"           |  | \"39045\"  | \"Neste Oil K-market Kahvila\"            |  | \"59681\"  | \"Halpa hinta\"                           |  | \"66295\"  | \"Laktoositon-tarjous\"                   |  | \"94258\"  | \"NenÃ¤pÃ¤ivÃ¤-tarjous\"                     |  | \"191745\" | \"Bannerit (KSM)\"                        |  | \"212756\" | \"SÃ¤hkÃ¶suora (KSM)\"                      |  | \"212757\" | \"Digimainonta (KSM)\"                    |  | \"97089\"  | \"KM Pohjanmaa\"                          |  | \"97088\"  | \"KM Kanta-HÃ¤me-Pirkanmaa\"               |  | \"97087\"  | \"KM Satakunta\"                          |  | \"97086\"  | \"KM Varsinais-Suomi\"                    |  | \"97085\"  | \"KM Pkseutu-Uusimaa\"                    |  | \"97084\"  | \"KM EtelÃ¤-Karjala-Kymenlaakso-PÃ¤ijÃ¤t-HÃ¤me\"|  | \"97083\"  | \"KM Keski- ja ItÃ¤-Suomi\"                |  | \"97082\"  | \"KM Pohjois-Suomi\"                      |  | \"96160\"  | \"K-Myllypuro\"                           |  | \"74493\"  | \"Sushi-tilauslomake\"                    |  | \"66739\"  | \"Keskolainen-demokaupat\"                |  | \"65059\"  | \"NOKM Quickwash\"                        |  | \"50896\"  | \"Tilaa tarjoilut -kaupparyhmÃ¤\"          |  | \"36030\"  | \"NOKM ei 24h\"                           |  | \"36029\"  | \"NOKM 24h\"                              |  | \"18445\"  | \"KM EtelÃ¤-Karjala-Kymeenlaakso\"         |  | \"11539\"  | \"KSM ItÃ¤- ja Keski-Suomi\"               |  | \"11538\"  | \"KSM Kaakkois-Suomi\"                    |  | \"151839\" | \"KSM Lahti\"                             |  | \"11537\"  | \"KSM Pirkanmaa-HÃ¤me\"                    |  | \"11536\"  | \"KSM Satakunta\"                         |  | \"11535\"  | \"KSM PK-Uusimaa (su-ru)\"                |  | \"11534\"  | \"KSM PK-Uusimaa\"                        |  | \"11533\"  | \"KSM Pohjois-Suomi (su-ru)\"             |  | \"11532\"  | \"KSM Pohjois-Suomi\"                     |  | \"11531\"  | \"KSM Varsinais-Suomi (su-ru)\"           |  | \"11530\"  | \"KSM Varsinais-Suomi\"                   |  | \"11529\"  | \"KSM Pohjanmaa (su-ru)\"                 |  | \"11498\"  | \"KSM Pohjanmaa\"                         |  | \"4661\"   | \"Neste Oil K-market\"                    |  | \"4660\"   | \"K-extra\"                               |  | \"4659\"   | \"K-market\"                              |  | \"4658\"   | \"K-citymarket\"                          |  | \"4657\"   | \"K-supermarket\"                         |  | \"166653\" | \"SLK K-Market\"                          |  | \"188787\" | \"KM Rinkikohtainen mainonta\"            |  | \"196934\" | \"Matkahuolto\"                           |    <br>    Possible `sortOrders` are:  * Sort by publishing date. Offer search results can be sorted by publishing date, showing latest publishing dates first. The structure of the object has to be  ```  {    \"name\": \"validFrom\"  }  ```  * Sort by custom priority. Results can be sorted by using priority list where each store can be given a specific priority number. Default priority is 0. It is given for stores missing from the list. The larger the number, the higher the priority. Stores with equal numbers are sorted by relevance. Stores whose priority is less than 0 are last in the search results, i.e. after stores that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"222978\", \"priority\": 5 }, // first result      { \"id\": \"224263\", \"priority\": -1 } // last result    ]  }  ```    Possible `facets` are:  * `Categories.Id`  * `Categories.Title`  * `Stores`  * `Chains`  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchOffersPost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_search_offers_with_http_info(**kwargs)  # noqa: E501

    def post_search_offers_with_http_info(self, **kwargs):  # noqa: E501
        """Offer search.  # noqa: E501

        API for searching offers and products linked to them. <br><br> Any prices listed by this API should not be used in any monetary transactions or price calculations, but they can be used for display purposes. The price data returned by this API is also the only way to display future offer prices not active at the moment.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_offers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `ids` *Boolean filter* A String or an Array of Strings defining the offers that are included in the search.  * `chainId` *Boolean filter* A String or an Array of Strings defining which store chains' offers are included in the search. Possible values are 'kcitymarket', 'ksupermarket', 'kmarket' and 'nokm'. If `chainId`  filter is not used, request returns offers from all chains.  * `storeId` *Boolean filter* A String or an Array of Strings defining which stores' offers are included in the search.  * `category` *Boolean filter* A String or an Array of Strings defining which  offer categories are included in the search.    Possible values for offer `category` filter are:    | Id       | Title                                   |  |----------|-----------------------------------------|  | \"8734\"   | \"KÃ¤rkitarjous\"                          |  | \"8735\"   | \"Elintarviketarjous\"                    |  | \"8736\"   | \"Plussa-tarjous\"                        |  | \"8737\"   | \"Pirkka-tarjous\"                        |  | \"8739\"   | \"TULI KUUMA -tarjous (KCM)\"             |  | \"8740\"   | \"SynttÃ¤ri-tarjous (KSM)\"                |  | \"8744\"   | \"Sinivalkoinen-tarjous\"                 |  | \"8998\"   | \"Pieneen hintaan -tarjous (KM)\"         |  | \"9522\"   | \"KÃ¤yttÃ¶tavaratarjous\"                   |  | \"9525\"   | \"Maito juusto munat ja rasvat -tarjous\" |  | \"9526\"   | \"Lihat ja kalat -tarjous\"               |  | \"9527\"   | \"HedelmÃ¤t ja vihannekset -tarjous\"      |  | \"9524\"   | \"Valmisruoka-tarjous\"                   |  | \"9528\"   | \"LeivÃ¤t keksit ja leivonnaiset -tarjous\"|  | \"9529\"   | \"Makeiset ja naposteltavat -tarjous\"    |  | \"9530\"   | \"Juomat-tarjous\"                        |  | \"9531\"   | \"Kodintarvikkeet-tarjous\"               |  | \"9532\"   | \"Pakasteet-tarjous\"                     |  | \"9533\"   | \"Maustaminen ja leivonta -tarjous\"      |  | \"9534\"   | \"Pastat riisit ja sÃ¤ilykkeet -tarjous\"  |  | \"9536\"   | \"Hygienian tarjous\"                     |  | \"9540\"   | \"Sisustuksen tarjous\"                   |  | \"9551\"   | \"Sisustustekstiilitarjous\"              |  | \"9541\"   | \"Vuodetekstiilitarjous\"                 |  | \"9542\"   | \"Ruuanlaiton tarjous\"                   |  | \"9544\"   | \"Vapaa-ajan tarjous\"                    |  | \"9545\"   | \"Viihteen tarjous\"                      |  | \"9546\"   | \"Lelutarjous\"                           |  | \"9547\"   | \"Urheilutarjous\"                        |  | \"9548\"   | \"TV-tarjous\"                            |  | \"9549\"   | \"Tietotekniikkatarjous\"                 |  | \"9550\"   | \"Kameratarjous\"                         |  | \"11117\"  | \"K-menu-tarjous\"                        |  | \"11643\"  | \"TÃ¤stÃ¤ ilmoitimme -tarjous (KSM)\"       |  | \"11966\"  | \"Hintaralli-tarjous ET (KCM)\"           |  | \"39044\"  | \"Neste Oil K-market Motorest\"           |  | \"39045\"  | \"Neste Oil K-market Kahvila\"            |  | \"59681\"  | \"Halpa hinta\"                           |  | \"66295\"  | \"Laktoositon-tarjous\"                   |  | \"94258\"  | \"NenÃ¤pÃ¤ivÃ¤-tarjous\"                     |  | \"191745\" | \"Bannerit (KSM)\"                        |  | \"212756\" | \"SÃ¤hkÃ¶suora (KSM)\"                      |  | \"212757\" | \"Digimainonta (KSM)\"                    |  | \"97089\"  | \"KM Pohjanmaa\"                          |  | \"97088\"  | \"KM Kanta-HÃ¤me-Pirkanmaa\"               |  | \"97087\"  | \"KM Satakunta\"                          |  | \"97086\"  | \"KM Varsinais-Suomi\"                    |  | \"97085\"  | \"KM Pkseutu-Uusimaa\"                    |  | \"97084\"  | \"KM EtelÃ¤-Karjala-Kymenlaakso-PÃ¤ijÃ¤t-HÃ¤me\"|  | \"97083\"  | \"KM Keski- ja ItÃ¤-Suomi\"                |  | \"97082\"  | \"KM Pohjois-Suomi\"                      |  | \"96160\"  | \"K-Myllypuro\"                           |  | \"74493\"  | \"Sushi-tilauslomake\"                    |  | \"66739\"  | \"Keskolainen-demokaupat\"                |  | \"65059\"  | \"NOKM Quickwash\"                        |  | \"50896\"  | \"Tilaa tarjoilut -kaupparyhmÃ¤\"          |  | \"36030\"  | \"NOKM ei 24h\"                           |  | \"36029\"  | \"NOKM 24h\"                              |  | \"18445\"  | \"KM EtelÃ¤-Karjala-Kymeenlaakso\"         |  | \"11539\"  | \"KSM ItÃ¤- ja Keski-Suomi\"               |  | \"11538\"  | \"KSM Kaakkois-Suomi\"                    |  | \"151839\" | \"KSM Lahti\"                             |  | \"11537\"  | \"KSM Pirkanmaa-HÃ¤me\"                    |  | \"11536\"  | \"KSM Satakunta\"                         |  | \"11535\"  | \"KSM PK-Uusimaa (su-ru)\"                |  | \"11534\"  | \"KSM PK-Uusimaa\"                        |  | \"11533\"  | \"KSM Pohjois-Suomi (su-ru)\"             |  | \"11532\"  | \"KSM Pohjois-Suomi\"                     |  | \"11531\"  | \"KSM Varsinais-Suomi (su-ru)\"           |  | \"11530\"  | \"KSM Varsinais-Suomi\"                   |  | \"11529\"  | \"KSM Pohjanmaa (su-ru)\"                 |  | \"11498\"  | \"KSM Pohjanmaa\"                         |  | \"4661\"   | \"Neste Oil K-market\"                    |  | \"4660\"   | \"K-extra\"                               |  | \"4659\"   | \"K-market\"                              |  | \"4658\"   | \"K-citymarket\"                          |  | \"4657\"   | \"K-supermarket\"                         |  | \"166653\" | \"SLK K-Market\"                          |  | \"188787\" | \"KM Rinkikohtainen mainonta\"            |  | \"196934\" | \"Matkahuolto\"                           |    <br>    Possible `sortOrders` are:  * Sort by publishing date. Offer search results can be sorted by publishing date, showing latest publishing dates first. The structure of the object has to be  ```  {    \"name\": \"validFrom\"  }  ```  * Sort by custom priority. Results can be sorted by using priority list where each store can be given a specific priority number. Default priority is 0. It is given for stores missing from the list. The larger the number, the higher the priority. Stores with equal numbers are sorted by relevance. Stores whose priority is less than 0 are last in the search results, i.e. after stores that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"222978\", \"priority\": 5 }, // first result      { \"id\": \"224263\", \"priority\": -1 } // last result    ]  }  ```    Possible `facets` are:  * `Categories.Id`  * `Categories.Title`  * `Stores`  * `Chains`  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchOffersPost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_offers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in local_var_params:
            body_params = local_var_params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/search/offers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchOffersPost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_search_products(self, **kwargs):  # noqa: E501
        """Product search.  # noqa: E501

        API for searching basic information and availability data about products. <br><br> This API doesn't know anything about product pricing, query [Pricing API](https://kesko.portal.azure-api.net/docs/services/pricingav/) with EAN codes returned by this service.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `ean` *Boolean filter* A String or an Array of Strings of EAN13 numbers. Filters the result set to only include products with mentioned EAN numbers. A single invalid EAN number will not fail the whole request.  * `urlSlug` *Boolean filter* A String or an Array of Strings defining the product url slugs which are included in the search.  * `brand` *Boolean filter* A String or an Array of Strings representing accepted brand names. At the moment possible values are `pirkka` and `kmenu`.  * `category` *Boolean filter* An Object defining what product categories should be included. You can get the list of available categories and subcategories by making a query with category `facets` enabled.    * `category.id` A String or an Array of Strings representing SAP values of categories. These are usually small integers presented as Strings.    * `category.finnish` A String or an Array of String representing category names in Finnish.  * `subcategory` *Boolean filter* An Object similar to `category`, but it represents the subcategory of a given category. As every subcategory belongs only to a single category, this can be used without defining the actual main `category` filter.  * `segment` *Boolean filter* An Object defining what product segments should be included. In product object segment name and id are defined MATKL attribute, see the ProductAttributes model. You can get the list of segments by making a query with segment `facets` enabled.    * `segment.id` A String or an Array of Strings representing segment identifiers. These are usually small integers presented as Strings.    * `segment.finnish` A String or an Array of String representing segment names in Finnish.  * `isConsumerGood` *Boolean filter* A Boolean representing whether the product is a consumer good (true) or a foodstuff (false).  * `nutritional` *Boolean filter* A String or an Array of Strings representing nutritional properties of a product. Nutritional properties are defined in the `TX_RAVOMI` attribute of a product. Accepted values are either SAP values (small integers as Strings) or property abbreviations (usually three letters long Strings).  * `environmental` *Boolean filter* A String or an Array of Strings representing environmental properties of a product. Similar to `nutritional` with the exception that possible values are derived from the `TX_YMPMER` attribute of a product.  * `packaging` *Boolean filter* A String or an Array of Strings representing packaging properties of a product. Similar to `nutritional` with the exception that possible values are derived from the `TX_PAKMER` attribute of a product.  * `ingredientType` *Boolean filter* A String or an Array of Strings, with max one item. Defines the ingredient type id the product must have to be included in the search. Possible values are defined by [Ingredients API](https://kesko.portal.azure-api.net/docs/services/ingredients/operations/get-ingredients).  * `storeAvailability` *Boolean filter* A String or an Array of Strings representing store ids. Only the products available in the specified store are included in the search results.  * `webstoreAvailability` *Boolean filter* A String or an Array of Strings representing store ids. Only the products available in the specified store by web are included in the search results.  * `webstoreAvailabilityWithAlcohol` *Boolean filter* A string or an Array of Strings representing store ids. Only the products available in the specified store by web with alcohol pickup are included in the search results.  * `foodstuffsWebstoreOnly` *Boolean filter* A string or an Array of Strings representing store ids. Only the products available in the specified store are included in the search results. Consumer goods and alcohol products are available if the store is in either `storeAvailability` or `webstoreAvailabilityWithAlcohol` whereas foodstuffs are only available if they are in `webstoreAvailabilityWithAlcohol`.    <br>Possible `dataSources` are:  * `kRuoka` for k-ruoka Tuotetietopankki products. This is the default value, which is used if no `dataSources` are defined.  * Store id for local products, e.g. `N106`. Note that for K-Citymarkets the food side id is used, `N106` for Iso Omena instead of `C609`. In some cases there can be the same ean in different data sources. E.g. two stores use the same ean number for different local products. If both stores are listed as `dataSources` in the query, there will be two products with the same ean in the search results.    <br>Possible `sortOrders` are:  * Sort by custom priority. Results can be sorted by using priority list where each product can be given a specific priority number. Default priority is 0. It is given for products missing from the list. The larger the number, the higher the priority. Products with equal numbers are sorted by relevance. Products whose priority is less than 0 are last in the search results, i.e. after products that are not included in the priority list. The structure of the custom priority object is  ```    {      \"name\": \"customPriority\",      \"priorityList\": [        { \"ean\": \"2000818700008\", \"priority\": 5 }, // first result        { \"ean\": \"2000604700007\", \"priority\": -1 } // last result      ]    }  ```    <br>It is possible to affect the scoring of the results according to a household's personal preference using the boost API `scriptScore`.  Similarly, the scoring can be altered based on a store's profit margin.  Note that the weighting for each is on different scales.  ```  {    \"query\":\"coca cola\",    \"filters\":{\"storeAvailability\":\"N106\"},    \"boost\": {      \"scoreBoostMethods\":[        {\"scriptScore\": {\"name\": \"personal\", \"parameters\": {\"householdId\": \"123456789\"}}, \"weight\": \"100\"},        {\"scriptScore\": {\"name\": \"storeProfit\", \"parameters\": {\"storeId\": \"N106\"}}, \"weight\": \"10\"}      ]    }  }  ```    <br>It is possible to include availability data to responses by definining `showAvailability` view option. Supplying an empty array to options means displaying all stores where product is available.    ```  {    \"query\":\"coca cola\",    \"view\": {      \"offset\": 0,      \"limit\": 30,      \"showAvailability\": {        \"storeAvailability\": [],        \"webstoreAvailability\": [\"N106\"]      }    }  }  ```    Possible `facets` are:  * `brand`  * `category.id`  * `subcategory.id`  * `category.finnish`  * `subcategory.finnish`  * `segment.id`  * `segment.finnish`  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchProductsPost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_search_products_with_http_info(**kwargs)  # noqa: E501

    def post_search_products_with_http_info(self, **kwargs):  # noqa: E501
        """Product search.  # noqa: E501

        API for searching basic information and availability data about products. <br><br> This API doesn't know anything about product pricing, query [Pricing API](https://kesko.portal.azure-api.net/docs/services/pricingav/) with EAN codes returned by this service.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `ean` *Boolean filter* A String or an Array of Strings of EAN13 numbers. Filters the result set to only include products with mentioned EAN numbers. A single invalid EAN number will not fail the whole request.  * `urlSlug` *Boolean filter* A String or an Array of Strings defining the product url slugs which are included in the search.  * `brand` *Boolean filter* A String or an Array of Strings representing accepted brand names. At the moment possible values are `pirkka` and `kmenu`.  * `category` *Boolean filter* An Object defining what product categories should be included. You can get the list of available categories and subcategories by making a query with category `facets` enabled.    * `category.id` A String or an Array of Strings representing SAP values of categories. These are usually small integers presented as Strings.    * `category.finnish` A String or an Array of String representing category names in Finnish.  * `subcategory` *Boolean filter* An Object similar to `category`, but it represents the subcategory of a given category. As every subcategory belongs only to a single category, this can be used without defining the actual main `category` filter.  * `segment` *Boolean filter* An Object defining what product segments should be included. In product object segment name and id are defined MATKL attribute, see the ProductAttributes model. You can get the list of segments by making a query with segment `facets` enabled.    * `segment.id` A String or an Array of Strings representing segment identifiers. These are usually small integers presented as Strings.    * `segment.finnish` A String or an Array of String representing segment names in Finnish.  * `isConsumerGood` *Boolean filter* A Boolean representing whether the product is a consumer good (true) or a foodstuff (false).  * `nutritional` *Boolean filter* A String or an Array of Strings representing nutritional properties of a product. Nutritional properties are defined in the `TX_RAVOMI` attribute of a product. Accepted values are either SAP values (small integers as Strings) or property abbreviations (usually three letters long Strings).  * `environmental` *Boolean filter* A String or an Array of Strings representing environmental properties of a product. Similar to `nutritional` with the exception that possible values are derived from the `TX_YMPMER` attribute of a product.  * `packaging` *Boolean filter* A String or an Array of Strings representing packaging properties of a product. Similar to `nutritional` with the exception that possible values are derived from the `TX_PAKMER` attribute of a product.  * `ingredientType` *Boolean filter* A String or an Array of Strings, with max one item. Defines the ingredient type id the product must have to be included in the search. Possible values are defined by [Ingredients API](https://kesko.portal.azure-api.net/docs/services/ingredients/operations/get-ingredients).  * `storeAvailability` *Boolean filter* A String or an Array of Strings representing store ids. Only the products available in the specified store are included in the search results.  * `webstoreAvailability` *Boolean filter* A String or an Array of Strings representing store ids. Only the products available in the specified store by web are included in the search results.  * `webstoreAvailabilityWithAlcohol` *Boolean filter* A string or an Array of Strings representing store ids. Only the products available in the specified store by web with alcohol pickup are included in the search results.  * `foodstuffsWebstoreOnly` *Boolean filter* A string or an Array of Strings representing store ids. Only the products available in the specified store are included in the search results. Consumer goods and alcohol products are available if the store is in either `storeAvailability` or `webstoreAvailabilityWithAlcohol` whereas foodstuffs are only available if they are in `webstoreAvailabilityWithAlcohol`.    <br>Possible `dataSources` are:  * `kRuoka` for k-ruoka Tuotetietopankki products. This is the default value, which is used if no `dataSources` are defined.  * Store id for local products, e.g. `N106`. Note that for K-Citymarkets the food side id is used, `N106` for Iso Omena instead of `C609`. In some cases there can be the same ean in different data sources. E.g. two stores use the same ean number for different local products. If both stores are listed as `dataSources` in the query, there will be two products with the same ean in the search results.    <br>Possible `sortOrders` are:  * Sort by custom priority. Results can be sorted by using priority list where each product can be given a specific priority number. Default priority is 0. It is given for products missing from the list. The larger the number, the higher the priority. Products with equal numbers are sorted by relevance. Products whose priority is less than 0 are last in the search results, i.e. after products that are not included in the priority list. The structure of the custom priority object is  ```    {      \"name\": \"customPriority\",      \"priorityList\": [        { \"ean\": \"2000818700008\", \"priority\": 5 }, // first result        { \"ean\": \"2000604700007\", \"priority\": -1 } // last result      ]    }  ```    <br>It is possible to affect the scoring of the results according to a household's personal preference using the boost API `scriptScore`.  Similarly, the scoring can be altered based on a store's profit margin.  Note that the weighting for each is on different scales.  ```  {    \"query\":\"coca cola\",    \"filters\":{\"storeAvailability\":\"N106\"},    \"boost\": {      \"scoreBoostMethods\":[        {\"scriptScore\": {\"name\": \"personal\", \"parameters\": {\"householdId\": \"123456789\"}}, \"weight\": \"100\"},        {\"scriptScore\": {\"name\": \"storeProfit\", \"parameters\": {\"storeId\": \"N106\"}}, \"weight\": \"10\"}      ]    }  }  ```    <br>It is possible to include availability data to responses by definining `showAvailability` view option. Supplying an empty array to options means displaying all stores where product is available.    ```  {    \"query\":\"coca cola\",    \"view\": {      \"offset\": 0,      \"limit\": 30,      \"showAvailability\": {        \"storeAvailability\": [],        \"webstoreAvailability\": [\"N106\"]      }    }  }  ```    Possible `facets` are:  * `brand`  * `category.id`  * `subcategory.id`  * `category.finnish`  * `subcategory.finnish`  * `segment.id`  * `segment.finnish`  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchProductsPost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_products" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in local_var_params:
            body_params = local_var_params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/search/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchProductsPost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_search_recipes(self, **kwargs):  # noqa: E501
        """Recipe search.  # noqa: E501

        API for searching recipes.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_recipes(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `ids` *Boolean filter* A String or an Array of Strings defining the recipe ids which are included in the search.  * `urlSlug` *Boolean filter* A String or an Array of Strings defining the recipe url slugs which are included in the search.  * `mainCategory` *Boolean filter* A String or an Array of Strings defining the main categories which are included in the search. Only category Ids can be used in the filter.  * `subCategory` *Boolean filter* A String or an Array of Strings defining the subcategories which are included in the search. Only category Ids can be used in the filter.     Possible `mainCategory` and `subCategory` values are:    | MainName                 | MainId |  |--------------------------|--------|  | \"Alkuruoat\"              | \"3\"    |  | \"Juomat\"                 | \"9\"    |  | \"JÃ¤lkiruoat\"             | \"5\"    |  | \"LisÃ¤kkeet\"              | \"6\"    |  | \"Makeat leivonnaiset\"    | \"7\"    |  | \"Makuja maailmalta\"      | \"2\"    |  | \"PÃ¤Ã¤ruoat\"               | \"4\"    |  | \"Sesonki\"                | \"1\"    |  | \"Suolaiset leivonnaiset\" | \"8\"    |  | \"SÃ¤ilÃ¶ntÃ¤\"               | \"10\"   |  | \"VÃ¤li- ja iltapalat\"     | \"11\"   |  | \"PÃ¤Ã¤raaka-aine\"          | \"14\"   |  | \"Teema\"                  | \"15\"   |      Sub categories for each main category:    <br>`Alkuruoat` subcategories are    | SubName           | SubId |  |-------------------|-------|  | \"Kalat\"           | \"16\"  |  | \"Keitot\"          | \"17\"  |  | \"Muut alkuruoat\"  | \"19\"  |  | \"Salaatit\"        | \"18\"  |    <br>`Juomat` subcategories are    | SubName           | SubId |  |-------------------|-------|  | \"KylmÃ¤t juomat\"   | \"59\"  |  | \"LÃ¤mpimÃ¤t juomat\" | \"60\"  |  | \"Muut juomat\"     | \"61\"  |      <br>`JÃ¤lkiruoat` subcategories are    | SubName                             | SubId |  |-------------------------------------|-------|  | \"HedelmÃ¤- ja marjasalaatit\"         | \"33\"  |  | \"HyytelÃ¶t ja vaahdot\"               | \"34\"  |  | \"Juomat\"                            | \"40\"  |  | \"JÃ¤Ã¤telÃ¶t, jÃ¤Ã¤dykkeet, sorbetit\"    | \"35\"  |  | \"Keitot, kiisselit ja kastikkeet\"   | \"36\"  |  | \"Makeiset\"                          | \"74\"  |  | \"Muut jÃ¤lkiruoat\"                   | \"41\"  |  | \"Ohukaiset, pannukakut ja vohvelit\" | \"37\"  |  | \"Paistokset\"                        | \"38\"  |  | \"Puurot\"                            | \"39\"  |      <br>`LisÃ¤kkeet` subcategories are    | SubName           | SubId |  |-------------------|-------|  | \"KasvislisÃ¤kkeet\" | \"42\"  |  | \"Muut lisÃ¤kkeet\"  | \"45\"  |  | \"PerunalisÃ¤kkeet\" | \"43\"  |  | \"Salaatit\"        | \"44\"  |      <br>`Makeat leivonnaiset` subcategories are    | SubName                    | SubId |  |----------------------------|-------|  | \"HyytelÃ¶tortut\"            | \"48\"  |  | \"Kahvikakut\"               | \"50\"  |  | \"Leivokset\"                | \"52\"  |  | \"Muut makeat leivonnaiset\" | \"53\"  |  | \"PikkuleivÃ¤t\"              | \"51\"  |  | \"Pullat\"                   | \"46\"  |  | \"Tortut ja piirakat\"       | \"49\"  |  | \"TÃ¤ytekakut\"               | \"47\"  |      <br>`Makuja maailmalta` subcategories are    | SubName     | SubId |  |-------------|-------|  | \"Aasia\"     | \"7\"   |  | \"Amerikka\"  | \"8\"   |  | \"Espanja\"   | \"79\"  |  | \"Intia\"     | \"9\"   |  | \"Italia\"    | \"10\"  |  | \"Kreikka\"   | \"11\"  |  | \"Meksiko\"   | \"12\"  |  | \"Muut maat\" | \"15\"  |  | \"Ranska\"    | \"13\"  |  | \"VenÃ¤jÃ¤\"    | \"14\"  |    <br>`PÃ¤Ã¤ruoat` subcategories are    | SubName                        | SubId |  |--------------------------------|-------|  | \"Broileri- ja muut linturuoat\" | \"21\"  |  | \"Grilliruoat\"                  | \"73\"  |  | \"Jauheliharuoat\"               | \"23\"  |  | \"Kalaruoat\"                    | \"20\"  |  | \"Kastikkeet\"                   | \"26\"  |  | \"Kasvisruoat\"                  | \"22\"  |  | \"Keitot\"                       | \"27\"  |  | \"Liharuoat\"                    | \"24\"  |  | \"Makkararuoat\"                 | \"25\"  |  | \"Muut pÃ¤Ã¤ruoat\"                | \"32\"  |  | \"Pastaruoat\"                   | \"31\"  |  | \"Pataruoat\"                    | \"29\"  |  | \"Salaatit\"                     | \"28\"  |  | \"Uuniruoat\"                    | \"30\"  |      <br>`Sesonki` subcategories are    | SubName                           | SubId |  |-----------------------------------|-------|  | \"Joulun leivonnaiset\"             | \"1\"   |  | \"PÃ¤Ã¤siÃ¤inen\"                      | \"2\"   |  | \"Vappu\"                           | \"3\"   |  | \"Kodin juhlat: ruoat\"             | \"4\"   |  | \"Grillikausi\"                     | \"5\"   |  | \"Muut sesongit/teemat\"            | \"6\"   |  | \"Joulun ruoat\"                    | \"75\"  |  | \"Kodin juhlat: leivonnaiset\"      | \"76\"  |  | \"Napero-reseptit/lapsille\"        | \"77\"  |  | \"Pirkka-tuotepakkausten reseptit\" | \"78\"  |  | \"Uusivuosi\"                       | \"81\"  |  | \"Ã„itienpÃ¤ivÃ¤\"                     | \"120\" |  | \"KesÃ¤\"                            | \"121\" |  | \"Juhannus\"                        | \"122\" |  | \"Rapujuhlat\"                      | \"123\" |  | \"Sadonkorjuu\"                     | \"124\" |  | \"Oktoberfest\"                     | \"125\" |  | \"Halloween\"                       | \"126\" |  | \"IsÃ¤npÃ¤ivÃ¤\"                       | \"127\" |  | \"Pikkujoulut\"                     | \"128\" |  | \"ItsenÃ¤isyyspÃ¤ivÃ¤\"                | \"129\" |  | \"Joulu\"                           | \"130\" |      <br>`Suolaiset leivonnaiset` subcategories are    | SubName                          | SubId |  |----------------------------------|-------|  | \"LeivÃ¤t ja sÃ¤mpylÃ¤t\"             | \"54\"  |  | \"Muut suolaiset leivonnaiset\"    | \"58\"  |  | \"Piirakat ja pasteijat\"          | \"55\"  |  | \"Pizzat\"                         | \"56\"  |  | \"VoileipÃ¤kakut ja hyytelÃ¶tortut\" | \"57\"  |      <br>`SÃ¤ilÃ¶ntÃ¤` subcategories are    | SubName                        | SubId |  |--------------------------------|-------|  | \"EtikkasÃ¤ilykkeet\"             | \"62\"  |  | \"Hillot, soseet ja marmeladit\" | \"63\"  |  | \"Mehut\"                        | \"64\"  |  | \"Muu sÃ¤ilÃ¶ntÃ¤\"                 | \"65\"  |      <br>`VÃ¤li- ja iltapalat` subcategories are    | SubName                   | SubId |  |---------------------------|-------|  | \"Juomat\"                  | \"71\"  |  | \"Muut vÃ¤li- ja iltapalat\" | \"72\"  |  | \"Piirakat\"                | \"67\"  |  | \"Pizzat\"                  | \"68\"  |  | \"Puurot\"                  | \"69\"  |  | \"Salaatit\"                | \"70\"  |  | \"TÃ¤ytetyt leivÃ¤t\"         | \"66\"  |      <br>`PÃ¤Ã¤raaka-aine` subcategories are    | SubName                   | SubId |  |---------------------------|-------|  | \"Broileri ja linnut\"      | \"118\" |  | \"Suklaa\"                  | \"112\" |  | \"Kasvis\"                  | \"115\" |  | \"Makkara\"                 | \"113\" |  | \"Jauheliha\"               | \"117\" |  | \"Ã„yriÃ¤iset\"               | \"111\" |  | \"Kala\"                    | \"116\" |  | \"Liha\"                    | \"114\" |  | \"Kananmuna\"               | \"110\" |      <br>`Teema` subcategories are    | SubName                           | SubId |  |-----------------------------------|-------|  | \"Brunssi\"                         | \"131\" |  | \"Piknik\"                          | \"132\" |  | \"Lasten reseptit\"                 | \"133\" |  | \"Pirkka-pakkausten reseptit\"      | \"134\" |  | \"MitÃ¤ tÃ¤nÃ¤Ã¤n syÃ¶tÃ¤isiin?\"         | \"144\" |    <br>    * `specialDiet` *Boolean filter* A String or an Array of Strings defining the diets which are included in the search. Only special diet Ids can be used in the filter.  <br>`specialDiet` Possible values are    | Name                 | Id  |  |----------------------|-----|  | \"Gluteeniton\"        | \"4\" |  | \"Kananmunaton\"       | \"7\" |  | \"Kasvis (lakto-ovo)\" | \"6\" |  | \"Laktoositon\"        | \"2\" |  | \"Maidoton\"           | \"3\" |  | \"Sokeriton\"          | \"5\" |  | \"VÃ¤hÃ¤laktoosinen\"    | \"1\" |    * `preparationTime` An Object defining the the time range how long time the preparation should take. The structure of the object has to be  ```  {    \"minTime\": 30,  /* a Number */    \"maxTime\": 60   /* a Number */  }  ```    It is not mandatory to define both minTime and maxTime. For more info, see PreparationTime model.  * `ingredientType` *Boolean filter* A String or an Array of Strings. Defines the ingredient type ids the recipe must have to be included in the search. Possible values are defined by [Ingredients API](https://kesko.portal.azure-api.net/docs/services/ingredients/operations/get-ingredients).  * `dateCreated` An Object defining the the time range when the recipe should have been made. The structure of the object has to be  ```  {    \"minDate\": '2014-03-18T09:16:30',  /* a ISO 8601 date string */    \"maxDate\": '2014-03-19',           /* a ISO 8601 date string */  }  ```  Leaving `minDate` or `maxDate` out counts as unbounded and at least one of them has to be defined in the object.    * `tvDate` An Object defining the the time range where the recipes tvDate should be. The structure of the object has to be  ```  {    \"minDate\": '2014-03-18T09:16:30',  /* a ISO 8601 date string */    \"maxDate\": '2014-03-19',           /* a ISO 8601 date string */  }  ```  Leaving `minDate` or `maxDate` out counts as unbounded and at least one of them has to be defined in the object.    <br>For mobile clients (ie. for mobile client tokens) there is also an extra filter available:    * `group` A String or an Array of Strings. Defines the recipe groups that are included in the search. Possible values are `popular`, `seasonal`, `cheapandeasy`, `mparillinen`, `mpariton` and `all` (default).  If filter array contains several `group` filters, only the first one is taken into account.    Possible `sortOrders` are:  * Sort by custom priority. Results can be sorted by using priority list where each recipe can be given a specific priority number. Default priority is 0. It is given for recipes missing from the list. The larger the number, the higher the priority. Recipes with equal numbers are sorted by relevance. Recipes whose priority is less than 0 are last in the search results, i.e. after recipes that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"5757\", \"priority\": 5 }, // first result      { \"id\": \"4976\", \"priority\": -1 } // last result    ]  }  ```  * Sort by TV date. Possible sorting orders are `asc` and `desc`, default is `desc`.  ```  {    \"name\": \"tvDate\",    \"order\": \"asc\"  }  ```     Possible `facets` are:  * `mainCategory`  * `subCategory`  * `specialDiet`  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchRecipesPost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_search_recipes_with_http_info(**kwargs)  # noqa: E501

    def post_search_recipes_with_http_info(self, **kwargs):  # noqa: E501
        """Recipe search.  # noqa: E501

        API for searching recipes.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_recipes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `ids` *Boolean filter* A String or an Array of Strings defining the recipe ids which are included in the search.  * `urlSlug` *Boolean filter* A String or an Array of Strings defining the recipe url slugs which are included in the search.  * `mainCategory` *Boolean filter* A String or an Array of Strings defining the main categories which are included in the search. Only category Ids can be used in the filter.  * `subCategory` *Boolean filter* A String or an Array of Strings defining the subcategories which are included in the search. Only category Ids can be used in the filter.     Possible `mainCategory` and `subCategory` values are:    | MainName                 | MainId |  |--------------------------|--------|  | \"Alkuruoat\"              | \"3\"    |  | \"Juomat\"                 | \"9\"    |  | \"JÃ¤lkiruoat\"             | \"5\"    |  | \"LisÃ¤kkeet\"              | \"6\"    |  | \"Makeat leivonnaiset\"    | \"7\"    |  | \"Makuja maailmalta\"      | \"2\"    |  | \"PÃ¤Ã¤ruoat\"               | \"4\"    |  | \"Sesonki\"                | \"1\"    |  | \"Suolaiset leivonnaiset\" | \"8\"    |  | \"SÃ¤ilÃ¶ntÃ¤\"               | \"10\"   |  | \"VÃ¤li- ja iltapalat\"     | \"11\"   |  | \"PÃ¤Ã¤raaka-aine\"          | \"14\"   |  | \"Teema\"                  | \"15\"   |      Sub categories for each main category:    <br>`Alkuruoat` subcategories are    | SubName           | SubId |  |-------------------|-------|  | \"Kalat\"           | \"16\"  |  | \"Keitot\"          | \"17\"  |  | \"Muut alkuruoat\"  | \"19\"  |  | \"Salaatit\"        | \"18\"  |    <br>`Juomat` subcategories are    | SubName           | SubId |  |-------------------|-------|  | \"KylmÃ¤t juomat\"   | \"59\"  |  | \"LÃ¤mpimÃ¤t juomat\" | \"60\"  |  | \"Muut juomat\"     | \"61\"  |      <br>`JÃ¤lkiruoat` subcategories are    | SubName                             | SubId |  |-------------------------------------|-------|  | \"HedelmÃ¤- ja marjasalaatit\"         | \"33\"  |  | \"HyytelÃ¶t ja vaahdot\"               | \"34\"  |  | \"Juomat\"                            | \"40\"  |  | \"JÃ¤Ã¤telÃ¶t, jÃ¤Ã¤dykkeet, sorbetit\"    | \"35\"  |  | \"Keitot, kiisselit ja kastikkeet\"   | \"36\"  |  | \"Makeiset\"                          | \"74\"  |  | \"Muut jÃ¤lkiruoat\"                   | \"41\"  |  | \"Ohukaiset, pannukakut ja vohvelit\" | \"37\"  |  | \"Paistokset\"                        | \"38\"  |  | \"Puurot\"                            | \"39\"  |      <br>`LisÃ¤kkeet` subcategories are    | SubName           | SubId |  |-------------------|-------|  | \"KasvislisÃ¤kkeet\" | \"42\"  |  | \"Muut lisÃ¤kkeet\"  | \"45\"  |  | \"PerunalisÃ¤kkeet\" | \"43\"  |  | \"Salaatit\"        | \"44\"  |      <br>`Makeat leivonnaiset` subcategories are    | SubName                    | SubId |  |----------------------------|-------|  | \"HyytelÃ¶tortut\"            | \"48\"  |  | \"Kahvikakut\"               | \"50\"  |  | \"Leivokset\"                | \"52\"  |  | \"Muut makeat leivonnaiset\" | \"53\"  |  | \"PikkuleivÃ¤t\"              | \"51\"  |  | \"Pullat\"                   | \"46\"  |  | \"Tortut ja piirakat\"       | \"49\"  |  | \"TÃ¤ytekakut\"               | \"47\"  |      <br>`Makuja maailmalta` subcategories are    | SubName     | SubId |  |-------------|-------|  | \"Aasia\"     | \"7\"   |  | \"Amerikka\"  | \"8\"   |  | \"Espanja\"   | \"79\"  |  | \"Intia\"     | \"9\"   |  | \"Italia\"    | \"10\"  |  | \"Kreikka\"   | \"11\"  |  | \"Meksiko\"   | \"12\"  |  | \"Muut maat\" | \"15\"  |  | \"Ranska\"    | \"13\"  |  | \"VenÃ¤jÃ¤\"    | \"14\"  |    <br>`PÃ¤Ã¤ruoat` subcategories are    | SubName                        | SubId |  |--------------------------------|-------|  | \"Broileri- ja muut linturuoat\" | \"21\"  |  | \"Grilliruoat\"                  | \"73\"  |  | \"Jauheliharuoat\"               | \"23\"  |  | \"Kalaruoat\"                    | \"20\"  |  | \"Kastikkeet\"                   | \"26\"  |  | \"Kasvisruoat\"                  | \"22\"  |  | \"Keitot\"                       | \"27\"  |  | \"Liharuoat\"                    | \"24\"  |  | \"Makkararuoat\"                 | \"25\"  |  | \"Muut pÃ¤Ã¤ruoat\"                | \"32\"  |  | \"Pastaruoat\"                   | \"31\"  |  | \"Pataruoat\"                    | \"29\"  |  | \"Salaatit\"                     | \"28\"  |  | \"Uuniruoat\"                    | \"30\"  |      <br>`Sesonki` subcategories are    | SubName                           | SubId |  |-----------------------------------|-------|  | \"Joulun leivonnaiset\"             | \"1\"   |  | \"PÃ¤Ã¤siÃ¤inen\"                      | \"2\"   |  | \"Vappu\"                           | \"3\"   |  | \"Kodin juhlat: ruoat\"             | \"4\"   |  | \"Grillikausi\"                     | \"5\"   |  | \"Muut sesongit/teemat\"            | \"6\"   |  | \"Joulun ruoat\"                    | \"75\"  |  | \"Kodin juhlat: leivonnaiset\"      | \"76\"  |  | \"Napero-reseptit/lapsille\"        | \"77\"  |  | \"Pirkka-tuotepakkausten reseptit\" | \"78\"  |  | \"Uusivuosi\"                       | \"81\"  |  | \"Ã„itienpÃ¤ivÃ¤\"                     | \"120\" |  | \"KesÃ¤\"                            | \"121\" |  | \"Juhannus\"                        | \"122\" |  | \"Rapujuhlat\"                      | \"123\" |  | \"Sadonkorjuu\"                     | \"124\" |  | \"Oktoberfest\"                     | \"125\" |  | \"Halloween\"                       | \"126\" |  | \"IsÃ¤npÃ¤ivÃ¤\"                       | \"127\" |  | \"Pikkujoulut\"                     | \"128\" |  | \"ItsenÃ¤isyyspÃ¤ivÃ¤\"                | \"129\" |  | \"Joulu\"                           | \"130\" |      <br>`Suolaiset leivonnaiset` subcategories are    | SubName                          | SubId |  |----------------------------------|-------|  | \"LeivÃ¤t ja sÃ¤mpylÃ¤t\"             | \"54\"  |  | \"Muut suolaiset leivonnaiset\"    | \"58\"  |  | \"Piirakat ja pasteijat\"          | \"55\"  |  | \"Pizzat\"                         | \"56\"  |  | \"VoileipÃ¤kakut ja hyytelÃ¶tortut\" | \"57\"  |      <br>`SÃ¤ilÃ¶ntÃ¤` subcategories are    | SubName                        | SubId |  |--------------------------------|-------|  | \"EtikkasÃ¤ilykkeet\"             | \"62\"  |  | \"Hillot, soseet ja marmeladit\" | \"63\"  |  | \"Mehut\"                        | \"64\"  |  | \"Muu sÃ¤ilÃ¶ntÃ¤\"                 | \"65\"  |      <br>`VÃ¤li- ja iltapalat` subcategories are    | SubName                   | SubId |  |---------------------------|-------|  | \"Juomat\"                  | \"71\"  |  | \"Muut vÃ¤li- ja iltapalat\" | \"72\"  |  | \"Piirakat\"                | \"67\"  |  | \"Pizzat\"                  | \"68\"  |  | \"Puurot\"                  | \"69\"  |  | \"Salaatit\"                | \"70\"  |  | \"TÃ¤ytetyt leivÃ¤t\"         | \"66\"  |      <br>`PÃ¤Ã¤raaka-aine` subcategories are    | SubName                   | SubId |  |---------------------------|-------|  | \"Broileri ja linnut\"      | \"118\" |  | \"Suklaa\"                  | \"112\" |  | \"Kasvis\"                  | \"115\" |  | \"Makkara\"                 | \"113\" |  | \"Jauheliha\"               | \"117\" |  | \"Ã„yriÃ¤iset\"               | \"111\" |  | \"Kala\"                    | \"116\" |  | \"Liha\"                    | \"114\" |  | \"Kananmuna\"               | \"110\" |      <br>`Teema` subcategories are    | SubName                           | SubId |  |-----------------------------------|-------|  | \"Brunssi\"                         | \"131\" |  | \"Piknik\"                          | \"132\" |  | \"Lasten reseptit\"                 | \"133\" |  | \"Pirkka-pakkausten reseptit\"      | \"134\" |  | \"MitÃ¤ tÃ¤nÃ¤Ã¤n syÃ¶tÃ¤isiin?\"         | \"144\" |    <br>    * `specialDiet` *Boolean filter* A String or an Array of Strings defining the diets which are included in the search. Only special diet Ids can be used in the filter.  <br>`specialDiet` Possible values are    | Name                 | Id  |  |----------------------|-----|  | \"Gluteeniton\"        | \"4\" |  | \"Kananmunaton\"       | \"7\" |  | \"Kasvis (lakto-ovo)\" | \"6\" |  | \"Laktoositon\"        | \"2\" |  | \"Maidoton\"           | \"3\" |  | \"Sokeriton\"          | \"5\" |  | \"VÃ¤hÃ¤laktoosinen\"    | \"1\" |    * `preparationTime` An Object defining the the time range how long time the preparation should take. The structure of the object has to be  ```  {    \"minTime\": 30,  /* a Number */    \"maxTime\": 60   /* a Number */  }  ```    It is not mandatory to define both minTime and maxTime. For more info, see PreparationTime model.  * `ingredientType` *Boolean filter* A String or an Array of Strings. Defines the ingredient type ids the recipe must have to be included in the search. Possible values are defined by [Ingredients API](https://kesko.portal.azure-api.net/docs/services/ingredients/operations/get-ingredients).  * `dateCreated` An Object defining the the time range when the recipe should have been made. The structure of the object has to be  ```  {    \"minDate\": '2014-03-18T09:16:30',  /* a ISO 8601 date string */    \"maxDate\": '2014-03-19',           /* a ISO 8601 date string */  }  ```  Leaving `minDate` or `maxDate` out counts as unbounded and at least one of them has to be defined in the object.    * `tvDate` An Object defining the the time range where the recipes tvDate should be. The structure of the object has to be  ```  {    \"minDate\": '2014-03-18T09:16:30',  /* a ISO 8601 date string */    \"maxDate\": '2014-03-19',           /* a ISO 8601 date string */  }  ```  Leaving `minDate` or `maxDate` out counts as unbounded and at least one of them has to be defined in the object.    <br>For mobile clients (ie. for mobile client tokens) there is also an extra filter available:    * `group` A String or an Array of Strings. Defines the recipe groups that are included in the search. Possible values are `popular`, `seasonal`, `cheapandeasy`, `mparillinen`, `mpariton` and `all` (default).  If filter array contains several `group` filters, only the first one is taken into account.    Possible `sortOrders` are:  * Sort by custom priority. Results can be sorted by using priority list where each recipe can be given a specific priority number. Default priority is 0. It is given for recipes missing from the list. The larger the number, the higher the priority. Recipes with equal numbers are sorted by relevance. Recipes whose priority is less than 0 are last in the search results, i.e. after recipes that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"5757\", \"priority\": 5 }, // first result      { \"id\": \"4976\", \"priority\": -1 } // last result    ]  }  ```  * Sort by TV date. Possible sorting orders are `asc` and `desc`, default is `desc`.  ```  {    \"name\": \"tvDate\",    \"order\": \"asc\"  }  ```     Possible `facets` are:  * `mainCategory`  * `subCategory`  * `specialDiet`  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchRecipesPost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_recipes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in local_var_params:
            body_params = local_var_params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/search/recipes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchRecipesPost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_search_stores(self, **kwargs):  # noqa: E501
        """Store search.  # noqa: E501

        Store search API for searching stores by different filters.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `municipality` *Boolean filter* A String or an Array of Strings defining the areas which are included in the search.  * `postCode` *Boolean filter* A String or an Array of Strings defining which postal codes are included in the search.  * `chainId` *Boolean filter* A String or an Array of Strings defining which store chains are included in the search. Possible values are 'kcitymarket', 'ksupermarket', 'kmarket', 'nokm' and 'kmyllypuro'.  * `ids` *Boolean filter* A String or an Array of Strings defining the stores that are included in the search.  * `services` *Boolean filter* An Array of String defining which all services have to be found from resulting stores.  * `deliveryPostCodes` *Boolean filter*  An array of String defining which postal codes the resulting stores have to be able to deliver to.  * `currentlyOpen` A boolean value determining whether the resulting stores should be open at the moment or not. Default is that all stores are returned.  * `locationBoundingBox` An Object defining the bounding box where stores should be physically located. The structure of the object has to be  ```  {    \"topLeft\": {      \"lon\": 42,     /* a Number */      \"lat\": 24      /* a Number */    },    \"bottomRight\": {      \"lon\": 142,    /* a Number */      \"lat\": 124     /* a Number */    }  }  ```    * `locationDistance` An Object defining an circle bounding box around a single coordinate location, where resulting stores should be located. The structure of the object has to be  ```  {    \"location\": {      \"lon\": 42,     /* a Number */      \"lat\": 24      /* a Number */    },    \"distance\": 5    /* a Number describing max. kilometers from location */  }  ```    <br>Possible `sortOrders` are:  * Sort by distance. Store search results can be sorted by distance to a specific location. The structure of the object has to be  ```  {    \"name\": \"distance\",    \"location\": {      \"lon\": 42,     /* a Number */      \"lat\": 24      /* a Number */    }  }  ```  In the search results data for each store contains field `Sort`, which is an Array. The first element of the array is the distance of the store to the given location.  * Sort by custom priority. Results can be sorted by using priority list where each store can be given a specific priority number. Default priority is 0. It is given for stores missing from the list. The larger the number, the higher the priority. Stores with equal numbers are sorted by relevance. Stores whose priority is less than 0 are last in the search results, i.e. after stores that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"E100\", \"priority\": 5 }, // first result      { \"id\": \"N106\", \"priority\": -1 } // last result    ]  }  ```    Possible `facets` are:  * `postCode`  * `deliveryPostCodes`  * `municipality`  * `serviceIds`  * `chainId`  
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchStoresPost200ApplicationJsonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_search_stores_with_http_info(**kwargs)  # noqa: E501

    def post_search_stores_with_http_info(self, **kwargs):  # noqa: E501
        """Store search.  # noqa: E501

        Store search API for searching stores by different filters.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Payload payload: Request payload. Has to have at least a query or a single filter defined.    <br>Normal request, where possible `filters` are:    * `municipality` *Boolean filter* A String or an Array of Strings defining the areas which are included in the search.  * `postCode` *Boolean filter* A String or an Array of Strings defining which postal codes are included in the search.  * `chainId` *Boolean filter* A String or an Array of Strings defining which store chains are included in the search. Possible values are 'kcitymarket', 'ksupermarket', 'kmarket', 'nokm' and 'kmyllypuro'.  * `ids` *Boolean filter* A String or an Array of Strings defining the stores that are included in the search.  * `services` *Boolean filter* An Array of String defining which all services have to be found from resulting stores.  * `deliveryPostCodes` *Boolean filter*  An array of String defining which postal codes the resulting stores have to be able to deliver to.  * `currentlyOpen` A boolean value determining whether the resulting stores should be open at the moment or not. Default is that all stores are returned.  * `locationBoundingBox` An Object defining the bounding box where stores should be physically located. The structure of the object has to be  ```  {    \"topLeft\": {      \"lon\": 42,     /* a Number */      \"lat\": 24      /* a Number */    },    \"bottomRight\": {      \"lon\": 142,    /* a Number */      \"lat\": 124     /* a Number */    }  }  ```    * `locationDistance` An Object defining an circle bounding box around a single coordinate location, where resulting stores should be located. The structure of the object has to be  ```  {    \"location\": {      \"lon\": 42,     /* a Number */      \"lat\": 24      /* a Number */    },    \"distance\": 5    /* a Number describing max. kilometers from location */  }  ```    <br>Possible `sortOrders` are:  * Sort by distance. Store search results can be sorted by distance to a specific location. The structure of the object has to be  ```  {    \"name\": \"distance\",    \"location\": {      \"lon\": 42,     /* a Number */      \"lat\": 24      /* a Number */    }  }  ```  In the search results data for each store contains field `Sort`, which is an Array. The first element of the array is the distance of the store to the given location.  * Sort by custom priority. Results can be sorted by using priority list where each store can be given a specific priority number. Default priority is 0. It is given for stores missing from the list. The larger the number, the higher the priority. Stores with equal numbers are sorted by relevance. Stores whose priority is less than 0 are last in the search results, i.e. after stores that are not included in the priority list. The structure of the custom priority object is  ```  {    \"name\": \"customPriority\",    \"priorityList\": [      { \"id\": \"E100\", \"priority\": 5 }, // first result      { \"id\": \"N106\", \"priority\": -1 } // last result    ]  }  ```    Possible `facets` are:  * `postCode`  * `deliveryPostCodes`  * `municipality`  * `serviceIds`  * `chainId`  
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchStoresPost200ApplicationJsonResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_stores" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in local_var_params:
            body_params = local_var_params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/search/stores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchStoresPost200ApplicationJsonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
