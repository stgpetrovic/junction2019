# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SearchOffersGet200ApplicationJsonResponseAllOf1Results(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'id': 'str',
        'name': 'str',
        'product_name': 'str',
        'eans': 'list[str]',
        'brand': 'str',
        'is_pirkka_product': 'bool',
        'is_plussa_offer': 'bool',
        'normal_price': 'str',
        'additional_info': 'str',
        'price': 'str',
        'unit': 'str',
        'categories': 'list[ArticleOldCategories]',
        'chains': 'list[str]',
        'stores': 'list[str]',
        'source': 'str',
        'url': 'str',
        'image': 'str',
        'valid_from': 'str',
        'visible_from': 'str',
        'visible_to': 'str',
        'sort': 'list[float]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'id': 'Id',
        'name': 'Name',
        'product_name': 'ProductName',
        'eans': 'Eans',
        'brand': 'Brand',
        'is_pirkka_product': 'IsPirkkaProduct',
        'is_plussa_offer': 'IsPlussaOffer',
        'normal_price': 'NormalPrice',
        'additional_info': 'AdditionalInfo',
        'price': 'Price',
        'unit': 'Unit',
        'categories': 'Categories',
        'chains': 'Chains',
        'stores': 'Stores',
        'source': 'Source',
        'url': 'Url',
        'image': 'Image',
        'valid_from': 'ValidFrom',
        'visible_from': 'VisibleFrom',
        'visible_to': 'VisibleTo',
        'sort': 'Sort'
    }

    def __init__(self, resource_type=None, id=None, name=None, product_name=None, eans=None, brand=None, is_pirkka_product=None, is_plussa_offer=None, normal_price=None, additional_info=None, price=None, unit=None, categories=None, chains=None, stores=None, source=None, url=None, image=None, valid_from=None, visible_from=None, visible_to=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """SearchOffersGet200ApplicationJsonResponseAllOf1Results - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._id = None
        self._name = None
        self._product_name = None
        self._eans = None
        self._brand = None
        self._is_pirkka_product = None
        self._is_plussa_offer = None
        self._normal_price = None
        self._additional_info = None
        self._price = None
        self._unit = None
        self._categories = None
        self._chains = None
        self._stores = None
        self._source = None
        self._url = None
        self._image = None
        self._valid_from = None
        self._visible_from = None
        self._visible_to = None
        self._sort = None
        self.discriminator = None

        self.resource_type = resource_type
        self.id = id
        self.name = name
        self.product_name = product_name
        if eans is not None:
            self.eans = eans
        if brand is not None:
            self.brand = brand
        self.is_pirkka_product = is_pirkka_product
        self.is_plussa_offer = is_plussa_offer
        self.normal_price = normal_price
        self.additional_info = additional_info
        self.price = price
        self.unit = unit
        self.categories = categories
        self.chains = chains
        self.stores = stores
        self.source = source
        if url is not None:
            self.url = url
        if image is not None:
            self.image = image
        self.valid_from = valid_from
        self.visible_from = visible_from
        self.visible_to = visible_to
        if sort is not None:
            self.sort = sort

    @property
    def resource_type(self):
        """Gets the resource_type of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501


        :return: The resource_type of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.


        :param resource_type: The resource_type of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["offer"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def id(self):
        """Gets the id of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Offer identifier  # noqa: E501

        :return: The id of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Offer identifier  # noqa: E501

        :param id: The id of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Offer name  # noqa: E501

        :return: The name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Offer name  # noqa: E501

        :param name: The name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def product_name(self):
        """Gets the product_name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Product name  # noqa: E501

        :return: The product_name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Product name  # noqa: E501

        :param product_name: The product_name of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_name is None:  # noqa: E501
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def eans(self):
        """Gets the eans of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        List of offer product eans. Note that this field sometimes contains garbage data! Make sure you check the with some validation logic before use (i.e. check that the eans have non-zero length, contain only characters in 0-9 range).   # noqa: E501

        :return: The eans of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: list[str]
        """
        return self._eans

    @eans.setter
    def eans(self, eans):
        """Sets the eans of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        List of offer product eans. Note that this field sometimes contains garbage data! Make sure you check the with some validation logic before use (i.e. check that the eans have non-zero length, contain only characters in 0-9 range).   # noqa: E501

        :param eans: The eans of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: list[str]
        """

        self._eans = eans

    @property
    def brand(self):
        """Gets the brand of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Product brand name  # noqa: E501

        :return: The brand of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Product brand name  # noqa: E501

        :param brand: The brand of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def is_pirkka_product(self):
        """Gets the is_pirkka_product of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        True, if this is Pirkka product.  # noqa: E501

        :return: The is_pirkka_product of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: bool
        """
        return self._is_pirkka_product

    @is_pirkka_product.setter
    def is_pirkka_product(self, is_pirkka_product):
        """Sets the is_pirkka_product of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        True, if this is Pirkka product.  # noqa: E501

        :param is_pirkka_product: The is_pirkka_product of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_pirkka_product is None:  # noqa: E501
            raise ValueError("Invalid value for `is_pirkka_product`, must not be `None`")  # noqa: E501

        self._is_pirkka_product = is_pirkka_product

    @property
    def is_plussa_offer(self):
        """Gets the is_plussa_offer of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        True, if this is Plussa offer.  # noqa: E501

        :return: The is_plussa_offer of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: bool
        """
        return self._is_plussa_offer

    @is_plussa_offer.setter
    def is_plussa_offer(self, is_plussa_offer):
        """Sets the is_plussa_offer of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        True, if this is Plussa offer.  # noqa: E501

        :param is_plussa_offer: The is_plussa_offer of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_plussa_offer is None:  # noqa: E501
            raise ValueError("Invalid value for `is_plussa_offer`, must not be `None`")  # noqa: E501

        self._is_plussa_offer = is_plussa_offer

    @property
    def normal_price(self):
        """Gets the normal_price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Normal price  # noqa: E501

        :return: The normal_price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._normal_price

    @normal_price.setter
    def normal_price(self, normal_price):
        """Sets the normal_price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Normal price  # noqa: E501

        :param normal_price: The normal_price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and normal_price is None:  # noqa: E501
            raise ValueError("Invalid value for `normal_price`, must not be `None`")  # noqa: E501

        self._normal_price = normal_price

    @property
    def additional_info(self):
        """Gets the additional_info of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Discounted price / kg  # noqa: E501

        :return: The additional_info of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Discounted price / kg  # noqa: E501

        :param additional_info: The additional_info of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and additional_info is None:  # noqa: E501
            raise ValueError("Invalid value for `additional_info`, must not be `None`")  # noqa: E501

        self._additional_info = additional_info

    @property
    def price(self):
        """Gets the price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Discounted price / unit  # noqa: E501

        :return: The price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Discounted price / unit  # noqa: E501

        :param price: The price of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def unit(self):
        """Gets the unit of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Product count for discount  # noqa: E501

        :return: The unit of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Product count for discount  # noqa: E501

        :param unit: The unit of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and unit is None:  # noqa: E501
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def categories(self):
        """Gets the categories of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Associated categories.  # noqa: E501

        :return: The categories of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: list[ArticleOldCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Associated categories.  # noqa: E501

        :param categories: The categories of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: list[ArticleOldCategories]
        """
        if self.local_vars_configuration.client_side_validation and categories is None:  # noqa: E501
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def chains(self):
        """Gets the chains of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        List of chains where this offer is valid. Empty list, if this is store specific offer.   # noqa: E501

        :return: The chains of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: list[str]
        """
        return self._chains

    @chains.setter
    def chains(self, chains):
        """Sets the chains of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        List of chains where this offer is valid. Empty list, if this is store specific offer.   # noqa: E501

        :param chains: The chains of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and chains is None:  # noqa: E501
            raise ValueError("Invalid value for `chains`, must not be `None`")  # noqa: E501

        self._chains = chains

    @property
    def stores(self):
        """Gets the stores of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        List of stores where this offer is valid. Empty list, if this is chain specific offer.   # noqa: E501

        :return: The stores of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: list[str]
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        List of stores where this offer is valid. Empty list, if this is chain specific offer.   # noqa: E501

        :param stores: The stores of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and stores is None:  # noqa: E501
            raise ValueError("Invalid value for `stores`, must not be `None`")  # noqa: E501

        self._stores = stores

    @property
    def source(self):
        """Gets the source of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Indicates whether this is chain, store or regional offer. Possible values \"chain\", \"store and \"regional\".   # noqa: E501

        :return: The source of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Indicates whether this is chain, store or regional offer. Possible values \"chain\", \"store and \"regional\".   # noqa: E501

        :param source: The source of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["chain", "store", "regional"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def url(self):
        """Gets the url of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        K-ruoka.fi url of this offer.  # noqa: E501

        :return: The url of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        K-ruoka.fi url of this offer.  # noqa: E501

        :param url: The url of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def image(self):
        """Gets the image of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Offer image url. See [imgix Documentation](https://docs.imgix.com/apis/url) for available image resize parameters. You should always scale the image down to desired size.   # noqa: E501

        :return: The image of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Offer image url. See [imgix Documentation](https://docs.imgix.com/apis/url) for available image resize parameters. You should always scale the image down to desired size.   # noqa: E501

        :param image: The image of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def valid_from(self):
        """Gets the valid_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Date when the offer is made valid.  # noqa: E501

        :return: The valid_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Date when the offer is made valid.  # noqa: E501

        :param valid_from: The valid_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and valid_from is None:  # noqa: E501
            raise ValueError("Invalid value for `valid_from`, must not be `None`")  # noqa: E501

        self._valid_from = valid_from

    @property
    def visible_from(self):
        """Gets the visible_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Date when the offer can be published.  # noqa: E501

        :return: The visible_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._visible_from

    @visible_from.setter
    def visible_from(self, visible_from):
        """Sets the visible_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Date when the offer can be published.  # noqa: E501

        :param visible_from: The visible_from of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and visible_from is None:  # noqa: E501
            raise ValueError("Invalid value for `visible_from`, must not be `None`")  # noqa: E501

        self._visible_from = visible_from

    @property
    def visible_to(self):
        """Gets the visible_to of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Date when the offer is made invalid.  # noqa: E501

        :return: The visible_to of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: str
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to):
        """Sets the visible_to of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Date when the offer is made invalid.  # noqa: E501

        :param visible_to: The visible_to of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and visible_to is None:  # noqa: E501
            raise ValueError("Invalid value for `visible_to`, must not be `None`")  # noqa: E501

        self._visible_to = visible_to

    @property
    def sort(self):
        """Gets the sort of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501

        Only present, if the results are sorted.  # noqa: E501

        :return: The sort of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :rtype: list[float]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.

        Only present, if the results are sorted.  # noqa: E501

        :param sort: The sort of this SearchOffersGet200ApplicationJsonResponseAllOf1Results.  # noqa: E501
        :type: list[float]
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchOffersGet200ApplicationJsonResponseAllOf1Results):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchOffersGet200ApplicationJsonResponseAllOf1Results):
            return True

        return self.to_dict() != other.to_dict()
