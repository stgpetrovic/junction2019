# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from search.configuration import Configuration


class Article(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'id': 'str',
        'legacy_id': 'int',
        'title': 'str',
        'description': 'str',
        'ingress': 'str',
        'body': 'str',
        'header_image_url': 'str',
        'header_video_url': 'str',
        'original_url': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'categories': 'list[ArticleCategories]',
        'slug': 'str',
        'theme_slug': 'str',
        'sort': 'list[float]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'id': 'id',
        'legacy_id': 'legacyId',
        'title': 'title',
        'description': 'description',
        'ingress': 'ingress',
        'body': 'body',
        'header_image_url': 'headerImageUrl',
        'header_video_url': 'headerVideoUrl',
        'original_url': 'originalUrl',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'categories': 'categories',
        'slug': 'slug',
        'theme_slug': 'themeSlug',
        'sort': 'Sort'
    }

    def __init__(self, resource_type=None, id=None, legacy_id=None, title=None, description=None, ingress=None, body=None, header_image_url=None, header_video_url=None, original_url=None, created_at=None, updated_at=None, categories=None, slug=None, theme_slug=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """Article - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._id = None
        self._legacy_id = None
        self._title = None
        self._description = None
        self._ingress = None
        self._body = None
        self._header_image_url = None
        self._header_video_url = None
        self._original_url = None
        self._created_at = None
        self._updated_at = None
        self._categories = None
        self._slug = None
        self._theme_slug = None
        self._sort = None
        self.discriminator = None

        self.resource_type = resource_type
        self.id = id
        if legacy_id is not None:
            self.legacy_id = legacy_id
        self.title = title
        self.description = description
        if ingress is not None:
            self.ingress = ingress
        if body is not None:
            self.body = body
        if header_image_url is not None:
            self.header_image_url = header_image_url
        if header_video_url is not None:
            self.header_video_url = header_video_url
        if original_url is not None:
            self.original_url = original_url
        self.created_at = created_at
        self.updated_at = updated_at
        self.categories = categories
        self.slug = slug
        if theme_slug is not None:
            self.theme_slug = theme_slug
        if sort is not None:
            self.sort = sort

    @property
    def resource_type(self):
        """Gets the resource_type of this Article.  # noqa: E501


        :return: The resource_type of this Article.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Article.


        :param resource_type: The resource_type of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["article"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def id(self):
        """Gets the id of this Article.  # noqa: E501

        Article identifier  # noqa: E501

        :return: The id of this Article.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Article.

        Article identifier  # noqa: E501

        :param id: The id of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def legacy_id(self):
        """Gets the legacy_id of this Article.  # noqa: E501

        Episerver article identifier  # noqa: E501

        :return: The legacy_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this Article.

        Episerver article identifier  # noqa: E501

        :param legacy_id: The legacy_id of this Article.  # noqa: E501
        :type: int
        """

        self._legacy_id = legacy_id

    @property
    def title(self):
        """Gets the title of this Article.  # noqa: E501

        Article title  # noqa: E501

        :return: The title of this Article.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Article.

        Article title  # noqa: E501

        :param title: The title of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Article.  # noqa: E501

        Short description  # noqa: E501

        :return: The description of this Article.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Article.

        Short description  # noqa: E501

        :param description: The description of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def ingress(self):
        """Gets the ingress of this Article.  # noqa: E501

        Ingress of the article.  # noqa: E501

        :return: The ingress of this Article.  # noqa: E501
        :rtype: str
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress):
        """Sets the ingress of this Article.

        Ingress of the article.  # noqa: E501

        :param ingress: The ingress of this Article.  # noqa: E501
        :type: str
        """

        self._ingress = ingress

    @property
    def body(self):
        """Gets the body of this Article.  # noqa: E501

        Main contents of the article in markdown format.  # noqa: E501

        :return: The body of this Article.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Article.

        Main contents of the article in markdown format.  # noqa: E501

        :param body: The body of this Article.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def header_image_url(self):
        """Gets the header_image_url of this Article.  # noqa: E501

        If the article has a header image, contains the absolute url of this image.   # noqa: E501

        :return: The header_image_url of this Article.  # noqa: E501
        :rtype: str
        """
        return self._header_image_url

    @header_image_url.setter
    def header_image_url(self, header_image_url):
        """Sets the header_image_url of this Article.

        If the article has a header image, contains the absolute url of this image.   # noqa: E501

        :param header_image_url: The header_image_url of this Article.  # noqa: E501
        :type: str
        """

        self._header_image_url = header_image_url

    @property
    def header_video_url(self):
        """Gets the header_video_url of this Article.  # noqa: E501

        If the article has a header video, contains the absolute url of this video.   # noqa: E501

        :return: The header_video_url of this Article.  # noqa: E501
        :rtype: str
        """
        return self._header_video_url

    @header_video_url.setter
    def header_video_url(self, header_video_url):
        """Sets the header_video_url of this Article.

        If the article has a header video, contains the absolute url of this video.   # noqa: E501

        :param header_video_url: The header_video_url of this Article.  # noqa: E501
        :type: str
        """

        self._header_video_url = header_video_url

    @property
    def original_url(self):
        """Gets the original_url of this Article.  # noqa: E501

        K-ruoka.fi url of this article.  # noqa: E501

        :return: The original_url of this Article.  # noqa: E501
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this Article.

        K-ruoka.fi url of this article.  # noqa: E501

        :param original_url: The original_url of this Article.  # noqa: E501
        :type: str
        """

        self._original_url = original_url

    @property
    def created_at(self):
        """Gets the created_at of this Article.  # noqa: E501

        Date when this article was created.  # noqa: E501

        :return: The created_at of this Article.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Article.

        Date when this article was created.  # noqa: E501

        :param created_at: The created_at of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Article.  # noqa: E501

        Date when this article was last modified.  # noqa: E501

        :return: The updated_at of this Article.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Article.

        Date when this article was last modified.  # noqa: E501

        :param updated_at: The updated_at of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def categories(self):
        """Gets the categories of this Article.  # noqa: E501

        Associated categories.  # noqa: E501

        :return: The categories of this Article.  # noqa: E501
        :rtype: list[ArticleCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Article.

        Associated categories.  # noqa: E501

        :param categories: The categories of this Article.  # noqa: E501
        :type: list[ArticleCategories]
        """
        if self.local_vars_configuration.client_side_validation and categories is None:  # noqa: E501
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def slug(self):
        """Gets the slug of this Article.  # noqa: E501

        URL slug of the article  # noqa: E501

        :return: The slug of this Article.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Article.

        URL slug of the article  # noqa: E501

        :param slug: The slug of this Article.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def theme_slug(self):
        """Gets the theme_slug of this Article.  # noqa: E501

        URL slug of the article theme  # noqa: E501

        :return: The theme_slug of this Article.  # noqa: E501
        :rtype: str
        """
        return self._theme_slug

    @theme_slug.setter
    def theme_slug(self, theme_slug):
        """Sets the theme_slug of this Article.

        URL slug of the article theme  # noqa: E501

        :param theme_slug: The theme_slug of this Article.  # noqa: E501
        :type: str
        """

        self._theme_slug = theme_slug

    @property
    def sort(self):
        """Gets the sort of this Article.  # noqa: E501

        Only present, if the results are sorted.  # noqa: E501

        :return: The sort of this Article.  # noqa: E501
        :rtype: list[float]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Article.

        Only present, if the results are sorted.  # noqa: E501

        :param sort: The sort of this Article.  # noqa: E501
        :type: list[float]
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Article):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Article):
            return True

        return self.to_dict() != other.to_dict()
