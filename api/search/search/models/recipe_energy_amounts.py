# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from search.configuration import Configuration


class RecipeEnergyAmounts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'carbohydrate_per_portion': 'str',
        'carbohydrate_per_unit': 'str',
        'fat_per_portion': 'str',
        'fat_per_unit': 'str',
        'kj_per_portion': 'str',
        'kj_per_unit': 'str',
        'kcal_per_portion': 'str',
        'kcal_per_unit': 'str',
        'protein_per_portion': 'str',
        'protein_per_unit': 'str'
    }

    attribute_map = {
        'carbohydrate_per_portion': 'CarbohydratePerPortion',
        'carbohydrate_per_unit': 'CarbohydratePerUnit',
        'fat_per_portion': 'FatPerPortion',
        'fat_per_unit': 'FatPerUnit',
        'kj_per_portion': 'KJPerPortion',
        'kj_per_unit': 'KJPerUnit',
        'kcal_per_portion': 'KcalPerPortion',
        'kcal_per_unit': 'KcalPerUnit',
        'protein_per_portion': 'ProteinPerPortion',
        'protein_per_unit': 'ProteinPerUnit'
    }

    def __init__(self, carbohydrate_per_portion=None, carbohydrate_per_unit=None, fat_per_portion=None, fat_per_unit=None, kj_per_portion=None, kj_per_unit=None, kcal_per_portion=None, kcal_per_unit=None, protein_per_portion=None, protein_per_unit=None, local_vars_configuration=None):  # noqa: E501
        """RecipeEnergyAmounts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._carbohydrate_per_portion = None
        self._carbohydrate_per_unit = None
        self._fat_per_portion = None
        self._fat_per_unit = None
        self._kj_per_portion = None
        self._kj_per_unit = None
        self._kcal_per_portion = None
        self._kcal_per_unit = None
        self._protein_per_portion = None
        self._protein_per_unit = None
        self.discriminator = None

        if carbohydrate_per_portion is not None:
            self.carbohydrate_per_portion = carbohydrate_per_portion
        if carbohydrate_per_unit is not None:
            self.carbohydrate_per_unit = carbohydrate_per_unit
        if fat_per_portion is not None:
            self.fat_per_portion = fat_per_portion
        if fat_per_unit is not None:
            self.fat_per_unit = fat_per_unit
        if kj_per_portion is not None:
            self.kj_per_portion = kj_per_portion
        if kj_per_unit is not None:
            self.kj_per_unit = kj_per_unit
        if kcal_per_portion is not None:
            self.kcal_per_portion = kcal_per_portion
        if kcal_per_unit is not None:
            self.kcal_per_unit = kcal_per_unit
        if protein_per_portion is not None:
            self.protein_per_portion = protein_per_portion
        if protein_per_unit is not None:
            self.protein_per_unit = protein_per_unit

    @property
    def carbohydrate_per_portion(self):
        """Gets the carbohydrate_per_portion of this RecipeEnergyAmounts.  # noqa: E501


        :return: The carbohydrate_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._carbohydrate_per_portion

    @carbohydrate_per_portion.setter
    def carbohydrate_per_portion(self, carbohydrate_per_portion):
        """Sets the carbohydrate_per_portion of this RecipeEnergyAmounts.


        :param carbohydrate_per_portion: The carbohydrate_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._carbohydrate_per_portion = carbohydrate_per_portion

    @property
    def carbohydrate_per_unit(self):
        """Gets the carbohydrate_per_unit of this RecipeEnergyAmounts.  # noqa: E501


        :return: The carbohydrate_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._carbohydrate_per_unit

    @carbohydrate_per_unit.setter
    def carbohydrate_per_unit(self, carbohydrate_per_unit):
        """Sets the carbohydrate_per_unit of this RecipeEnergyAmounts.


        :param carbohydrate_per_unit: The carbohydrate_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._carbohydrate_per_unit = carbohydrate_per_unit

    @property
    def fat_per_portion(self):
        """Gets the fat_per_portion of this RecipeEnergyAmounts.  # noqa: E501


        :return: The fat_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._fat_per_portion

    @fat_per_portion.setter
    def fat_per_portion(self, fat_per_portion):
        """Sets the fat_per_portion of this RecipeEnergyAmounts.


        :param fat_per_portion: The fat_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._fat_per_portion = fat_per_portion

    @property
    def fat_per_unit(self):
        """Gets the fat_per_unit of this RecipeEnergyAmounts.  # noqa: E501


        :return: The fat_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._fat_per_unit

    @fat_per_unit.setter
    def fat_per_unit(self, fat_per_unit):
        """Sets the fat_per_unit of this RecipeEnergyAmounts.


        :param fat_per_unit: The fat_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._fat_per_unit = fat_per_unit

    @property
    def kj_per_portion(self):
        """Gets the kj_per_portion of this RecipeEnergyAmounts.  # noqa: E501


        :return: The kj_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._kj_per_portion

    @kj_per_portion.setter
    def kj_per_portion(self, kj_per_portion):
        """Sets the kj_per_portion of this RecipeEnergyAmounts.


        :param kj_per_portion: The kj_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._kj_per_portion = kj_per_portion

    @property
    def kj_per_unit(self):
        """Gets the kj_per_unit of this RecipeEnergyAmounts.  # noqa: E501


        :return: The kj_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._kj_per_unit

    @kj_per_unit.setter
    def kj_per_unit(self, kj_per_unit):
        """Sets the kj_per_unit of this RecipeEnergyAmounts.


        :param kj_per_unit: The kj_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._kj_per_unit = kj_per_unit

    @property
    def kcal_per_portion(self):
        """Gets the kcal_per_portion of this RecipeEnergyAmounts.  # noqa: E501


        :return: The kcal_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._kcal_per_portion

    @kcal_per_portion.setter
    def kcal_per_portion(self, kcal_per_portion):
        """Sets the kcal_per_portion of this RecipeEnergyAmounts.


        :param kcal_per_portion: The kcal_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._kcal_per_portion = kcal_per_portion

    @property
    def kcal_per_unit(self):
        """Gets the kcal_per_unit of this RecipeEnergyAmounts.  # noqa: E501


        :return: The kcal_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._kcal_per_unit

    @kcal_per_unit.setter
    def kcal_per_unit(self, kcal_per_unit):
        """Sets the kcal_per_unit of this RecipeEnergyAmounts.


        :param kcal_per_unit: The kcal_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._kcal_per_unit = kcal_per_unit

    @property
    def protein_per_portion(self):
        """Gets the protein_per_portion of this RecipeEnergyAmounts.  # noqa: E501


        :return: The protein_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._protein_per_portion

    @protein_per_portion.setter
    def protein_per_portion(self, protein_per_portion):
        """Sets the protein_per_portion of this RecipeEnergyAmounts.


        :param protein_per_portion: The protein_per_portion of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._protein_per_portion = protein_per_portion

    @property
    def protein_per_unit(self):
        """Gets the protein_per_unit of this RecipeEnergyAmounts.  # noqa: E501


        :return: The protein_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :rtype: str
        """
        return self._protein_per_unit

    @protein_per_unit.setter
    def protein_per_unit(self, protein_per_unit):
        """Sets the protein_per_unit of this RecipeEnergyAmounts.


        :param protein_per_unit: The protein_per_unit of this RecipeEnergyAmounts.  # noqa: E501
        :type: str
        """

        self._protein_per_unit = protein_per_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipeEnergyAmounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecipeEnergyAmounts):
            return True

        return self.to_dict() != other.to_dict()
