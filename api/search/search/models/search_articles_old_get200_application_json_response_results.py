# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from search.configuration import Configuration


class SearchArticlesOldGet200ApplicationJsonResponseResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'main_body': 'str',
        'video_url': 'str',
        'url': 'str',
        'last_modified': 'str',
        'visible_from': 'str',
        'visible_to': 'str',
        'images': 'ArticleOldImages',
        'categories': 'list[ArticleOldCategories]',
        'sort': 'list[float]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'id': 'Id',
        'title': 'Title',
        'description': 'Description',
        'main_body': 'MainBody',
        'video_url': 'VideoUrl',
        'url': 'Url',
        'last_modified': 'LastModified',
        'visible_from': 'VisibleFrom',
        'visible_to': 'VisibleTo',
        'images': 'Images',
        'categories': 'Categories',
        'sort': 'Sort'
    }

    def __init__(self, resource_type=None, id=None, title=None, description=None, main_body=None, video_url=None, url=None, last_modified=None, visible_from=None, visible_to=None, images=None, categories=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """SearchArticlesOldGet200ApplicationJsonResponseResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._id = None
        self._title = None
        self._description = None
        self._main_body = None
        self._video_url = None
        self._url = None
        self._last_modified = None
        self._visible_from = None
        self._visible_to = None
        self._images = None
        self._categories = None
        self._sort = None
        self.discriminator = None

        self.resource_type = resource_type
        self.id = id
        self.title = title
        self.description = description
        self.main_body = main_body
        if video_url is not None:
            self.video_url = video_url
        if url is not None:
            self.url = url
        if last_modified is not None:
            self.last_modified = last_modified
        self.visible_from = visible_from
        self.visible_to = visible_to
        if images is not None:
            self.images = images
        self.categories = categories
        if sort is not None:
            self.sort = sort

    @property
    def resource_type(self):
        """Gets the resource_type of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501


        :return: The resource_type of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SearchArticlesOldGet200ApplicationJsonResponseResults.


        :param resource_type: The resource_type of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["article"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def id(self):
        """Gets the id of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Article identifier  # noqa: E501

        :return: The id of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Article identifier  # noqa: E501

        :param id: The id of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Article title  # noqa: E501

        :return: The title of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Article title  # noqa: E501

        :param title: The title of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Short description  # noqa: E501

        :return: The description of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Short description  # noqa: E501

        :param description: The description of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def main_body(self):
        """Gets the main_body of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Main contents of the article in html format.  # noqa: E501

        :return: The main_body of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._main_body

    @main_body.setter
    def main_body(self, main_body):
        """Sets the main_body of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Main contents of the article in html format.  # noqa: E501

        :param main_body: The main_body of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and main_body is None:  # noqa: E501
            raise ValueError("Invalid value for `main_body`, must not be `None`")  # noqa: E501

        self._main_body = main_body

    @property
    def video_url(self):
        """Gets the video_url of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        If the article has a video, contains absolute url of this video.   # noqa: E501

        :return: The video_url of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        If the article has a video, contains absolute url of this video.   # noqa: E501

        :param video_url: The video_url of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """

        self._video_url = video_url

    @property
    def url(self):
        """Gets the url of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        K-ruoka.fi url of this article.  # noqa: E501

        :return: The url of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        K-ruoka.fi url of this article.  # noqa: E501

        :param url: The url of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def last_modified(self):
        """Gets the last_modified of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Date when this article was last modified.  # noqa: E501

        :return: The last_modified of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Date when this article was last modified.  # noqa: E501

        :param last_modified: The last_modified of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def visible_from(self):
        """Gets the visible_from of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Date when the article is made visible on the website.  # noqa: E501

        :return: The visible_from of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._visible_from

    @visible_from.setter
    def visible_from(self, visible_from):
        """Sets the visible_from of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Date when the article is made visible on the website.  # noqa: E501

        :param visible_from: The visible_from of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and visible_from is None:  # noqa: E501
            raise ValueError("Invalid value for `visible_from`, must not be `None`")  # noqa: E501

        self._visible_from = visible_from

    @property
    def visible_to(self):
        """Gets the visible_to of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Date when the article is unpublished.  # noqa: E501

        :return: The visible_to of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: str
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to):
        """Sets the visible_to of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Date when the article is unpublished.  # noqa: E501

        :param visible_to: The visible_to of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and visible_to is None:  # noqa: E501
            raise ValueError("Invalid value for `visible_to`, must not be `None`")  # noqa: E501

        self._visible_to = visible_to

    @property
    def images(self):
        """Gets the images of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501


        :return: The images of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: ArticleOldImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SearchArticlesOldGet200ApplicationJsonResponseResults.


        :param images: The images of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: ArticleOldImages
        """

        self._images = images

    @property
    def categories(self):
        """Gets the categories of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Associated categories.  # noqa: E501

        :return: The categories of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: list[ArticleOldCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Associated categories.  # noqa: E501

        :param categories: The categories of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: list[ArticleOldCategories]
        """
        if self.local_vars_configuration.client_side_validation and categories is None:  # noqa: E501
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def sort(self):
        """Gets the sort of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501

        Only present, if the results are sorted.  # noqa: E501

        :return: The sort of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :rtype: list[float]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchArticlesOldGet200ApplicationJsonResponseResults.

        Only present, if the results are sorted.  # noqa: E501

        :param sort: The sort of this SearchArticlesOldGet200ApplicationJsonResponseResults.  # noqa: E501
        :type: list[float]
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchArticlesOldGet200ApplicationJsonResponseResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchArticlesOldGet200ApplicationJsonResponseResults):
            return True

        return self.to_dict() != other.to_dict()
