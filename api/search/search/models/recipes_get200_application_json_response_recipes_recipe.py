# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from search.configuration import Configuration


class RecipesGet200ApplicationJsonResponseRecipesRecipe(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'list[str]',
        'name': 'list[str]',
        'piece_size': 'list[RecipeOldPieceSize]',
        'portions': 'list[RecipeOldPortions]',
        'preparation_time': 'list[str]',
        'categories': 'list[RecipeOldCategories]',
        'pictures': 'list[RecipeOldPictures]',
        'picture_urls': 'list[RecipeOldPictureUrls]',
        'ingredients': 'list[RecipeOldIngredients]',
        'instructions': 'list[str]',
        'end_note': 'list[str]',
        'description': 'list[str]',
        'date_created': 'list[datetime]',
        'date_modified': 'list[datetime]',
        'stamp': 'list[RecipeOldStamp]',
        'recipe_use': 'list[RecipeOldRecipeUse]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'piece_size': 'PieceSize',
        'portions': 'Portions',
        'preparation_time': 'PreparationTime',
        'categories': 'Categories',
        'pictures': 'Pictures',
        'picture_urls': 'PictureUrls',
        'ingredients': 'Ingredients',
        'instructions': 'Instructions',
        'end_note': 'EndNote',
        'description': 'Description',
        'date_created': 'DateCreated',
        'date_modified': 'DateModified',
        'stamp': 'Stamp',
        'recipe_use': 'RecipeUse'
    }

    def __init__(self, id=None, name=None, piece_size=None, portions=None, preparation_time=None, categories=None, pictures=None, picture_urls=None, ingredients=None, instructions=None, end_note=None, description=None, date_created=None, date_modified=None, stamp=None, recipe_use=None, local_vars_configuration=None):  # noqa: E501
        """RecipesGet200ApplicationJsonResponseRecipesRecipe - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._piece_size = None
        self._portions = None
        self._preparation_time = None
        self._categories = None
        self._pictures = None
        self._picture_urls = None
        self._ingredients = None
        self._instructions = None
        self._end_note = None
        self._description = None
        self._date_created = None
        self._date_modified = None
        self._stamp = None
        self._recipe_use = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if piece_size is not None:
            self.piece_size = piece_size
        if portions is not None:
            self.portions = portions
        if preparation_time is not None:
            self.preparation_time = preparation_time
        if categories is not None:
            self.categories = categories
        if pictures is not None:
            self.pictures = pictures
        if picture_urls is not None:
            self.picture_urls = picture_urls
        if ingredients is not None:
            self.ingredients = ingredients
        if instructions is not None:
            self.instructions = instructions
        if end_note is not None:
            self.end_note = end_note
        if description is not None:
            self.description = description
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if stamp is not None:
            self.stamp = stamp
        if recipe_use is not None:
            self.recipe_use = recipe_use

    @property
    def id(self):
        """Gets the id of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The id of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param id: The id of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[str]
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The name of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param name: The name of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[str]
        """

        self._name = name

    @property
    def piece_size(self):
        """Gets the piece_size of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The piece_size of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldPieceSize]
        """
        return self._piece_size

    @piece_size.setter
    def piece_size(self, piece_size):
        """Sets the piece_size of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param piece_size: The piece_size of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldPieceSize]
        """

        self._piece_size = piece_size

    @property
    def portions(self):
        """Gets the portions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The portions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldPortions]
        """
        return self._portions

    @portions.setter
    def portions(self, portions):
        """Sets the portions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param portions: The portions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldPortions]
        """

        self._portions = portions

    @property
    def preparation_time(self):
        """Gets the preparation_time of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The preparation_time of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param preparation_time: The preparation_time of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[str]
        """

        self._preparation_time = preparation_time

    @property
    def categories(self):
        """Gets the categories of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The categories of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param categories: The categories of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldCategories]
        """

        self._categories = categories

    @property
    def pictures(self):
        """Gets the pictures of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The pictures of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldPictures]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param pictures: The pictures of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldPictures]
        """

        self._pictures = pictures

    @property
    def picture_urls(self):
        """Gets the picture_urls of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The picture_urls of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldPictureUrls]
        """
        return self._picture_urls

    @picture_urls.setter
    def picture_urls(self, picture_urls):
        """Sets the picture_urls of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param picture_urls: The picture_urls of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldPictureUrls]
        """

        self._picture_urls = picture_urls

    @property
    def ingredients(self):
        """Gets the ingredients of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The ingredients of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldIngredients]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param ingredients: The ingredients of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldIngredients]
        """

        self._ingredients = ingredients

    @property
    def instructions(self):
        """Gets the instructions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The instructions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param instructions: The instructions of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[str]
        """

        self._instructions = instructions

    @property
    def end_note(self):
        """Gets the end_note of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The end_note of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._end_note

    @end_note.setter
    def end_note(self, end_note):
        """Sets the end_note of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param end_note: The end_note of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[str]
        """

        self._end_note = end_note

    @property
    def description(self):
        """Gets the description of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The description of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param description: The description of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def date_created(self):
        """Gets the date_created of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The date_created of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param date_created: The date_created of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[datetime]
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The date_modified of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param date_modified: The date_modified of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[datetime]
        """

        self._date_modified = date_modified

    @property
    def stamp(self):
        """Gets the stamp of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The stamp of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldStamp]
        """
        return self._stamp

    @stamp.setter
    def stamp(self, stamp):
        """Sets the stamp of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param stamp: The stamp of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldStamp]
        """

        self._stamp = stamp

    @property
    def recipe_use(self):
        """Gets the recipe_use of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501


        :return: The recipe_use of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :rtype: list[RecipeOldRecipeUse]
        """
        return self._recipe_use

    @recipe_use.setter
    def recipe_use(self, recipe_use):
        """Sets the recipe_use of this RecipesGet200ApplicationJsonResponseRecipesRecipe.


        :param recipe_use: The recipe_use of this RecipesGet200ApplicationJsonResponseRecipesRecipe.  # noqa: E501
        :type: list[RecipeOldRecipeUse]
        """

        self._recipe_use = recipe_use

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipesGet200ApplicationJsonResponseRecipesRecipe):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecipesGet200ApplicationJsonResponseRecipesRecipe):
            return True

        return self.to_dict() != other.to_dict()
