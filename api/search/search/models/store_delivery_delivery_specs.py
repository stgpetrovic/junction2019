# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api.search.search.configuration import Configuration


class StoreDeliveryDeliverySpecs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delivery_method': 'str',
        'ean': 'str',
        'min_price': 'float',
        'price': 'float',
        'require_plussa_card': 'bool'
    }

    attribute_map = {
        'delivery_method': 'DeliveryMethod',
        'ean': 'Ean',
        'min_price': 'MinPrice',
        'price': 'Price',
        'require_plussa_card': 'RequirePlussaCard'
    }

    def __init__(self, delivery_method=None, ean=None, min_price=None, price=None, require_plussa_card=None, local_vars_configuration=None):  # noqa: E501
        """StoreDeliveryDeliverySpecs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delivery_method = None
        self._ean = None
        self._min_price = None
        self._price = None
        self._require_plussa_card = None
        self.discriminator = None

        self.delivery_method = delivery_method
        if ean is not None:
            self.ean = ean
        self.min_price = min_price
        self.price = price
        self.require_plussa_card = require_plussa_card

    @property
    def delivery_method(self):
        """Gets the delivery_method of this StoreDeliveryDeliverySpecs.  # noqa: E501

        Type of delivery method this specification relates to   # noqa: E501

        :return: The delivery_method of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this StoreDeliveryDeliverySpecs.

        Type of delivery method this specification relates to   # noqa: E501

        :param delivery_method: The delivery_method of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and delivery_method is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_method`, must not be `None`")  # noqa: E501

        self._delivery_method = delivery_method

    @property
    def ean(self):
        """Gets the ean of this StoreDeliveryDeliverySpecs.  # noqa: E501

        EAN code for the price  # noqa: E501

        :return: The ean of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this StoreDeliveryDeliverySpecs.

        EAN code for the price  # noqa: E501

        :param ean: The ean of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :type: str
        """

        self._ean = ean

    @property
    def min_price(self):
        """Gets the min_price of this StoreDeliveryDeliverySpecs.  # noqa: E501

        Minimum price required for this specification to be valid   # noqa: E501

        :return: The min_price of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :rtype: float
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this StoreDeliveryDeliverySpecs.

        Minimum price required for this specification to be valid   # noqa: E501

        :param min_price: The min_price of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and min_price is None:  # noqa: E501
            raise ValueError("Invalid value for `min_price`, must not be `None`")  # noqa: E501

        self._min_price = min_price

    @property
    def price(self):
        """Gets the price of this StoreDeliveryDeliverySpecs.  # noqa: E501

        Price for this specification (delivery, pickup etc)   # noqa: E501

        :return: The price of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this StoreDeliveryDeliverySpecs.

        Price for this specification (delivery, pickup etc)   # noqa: E501

        :param price: The price of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def require_plussa_card(self):
        """Gets the require_plussa_card of this StoreDeliveryDeliverySpecs.  # noqa: E501

        Does this delivery specification require plussa card or not   # noqa: E501

        :return: The require_plussa_card of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :rtype: bool
        """
        return self._require_plussa_card

    @require_plussa_card.setter
    def require_plussa_card(self, require_plussa_card):
        """Sets the require_plussa_card of this StoreDeliveryDeliverySpecs.

        Does this delivery specification require plussa card or not   # noqa: E501

        :param require_plussa_card: The require_plussa_card of this StoreDeliveryDeliverySpecs.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and require_plussa_card is None:  # noqa: E501
            raise ValueError("Invalid value for `require_plussa_card`, must not be `None`")  # noqa: E501

        self._require_plussa_card = require_plussa_card

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreDeliveryDeliverySpecs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoreDeliveryDeliverySpecs):
            return True

        return self.to_dict() != other.to_dict()
