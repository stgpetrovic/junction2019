# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from search.configuration import Configuration


class ProductMeasurements(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'width': 'float',
        'height': 'float',
        'length': 'float',
        'volume': 'float',
        'net_weight': 'float',
        'average_weight': 'float'
    }

    attribute_map = {
        'width': 'width',
        'height': 'height',
        'length': 'length',
        'volume': 'volume',
        'net_weight': 'netWeight',
        'average_weight': 'averageWeight'
    }

    def __init__(self, width=None, height=None, length=None, volume=None, net_weight=None, average_weight=None, local_vars_configuration=None):  # noqa: E501
        """ProductMeasurements - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._width = None
        self._height = None
        self._length = None
        self._volume = None
        self._net_weight = None
        self._average_weight = None
        self.discriminator = None

        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if length is not None:
            self.length = length
        if volume is not None:
            self.volume = volume
        if net_weight is not None:
            self.net_weight = net_weight
        if average_weight is not None:
            self.average_weight = average_weight

    @property
    def width(self):
        """Gets the width of this ProductMeasurements.  # noqa: E501


        :return: The width of this ProductMeasurements.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProductMeasurements.


        :param width: The width of this ProductMeasurements.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this ProductMeasurements.  # noqa: E501


        :return: The height of this ProductMeasurements.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ProductMeasurements.


        :param height: The height of this ProductMeasurements.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def length(self):
        """Gets the length of this ProductMeasurements.  # noqa: E501


        :return: The length of this ProductMeasurements.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ProductMeasurements.


        :param length: The length of this ProductMeasurements.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def volume(self):
        """Gets the volume of this ProductMeasurements.  # noqa: E501


        :return: The volume of this ProductMeasurements.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ProductMeasurements.


        :param volume: The volume of this ProductMeasurements.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def net_weight(self):
        """Gets the net_weight of this ProductMeasurements.  # noqa: E501


        :return: The net_weight of this ProductMeasurements.  # noqa: E501
        :rtype: float
        """
        return self._net_weight

    @net_weight.setter
    def net_weight(self, net_weight):
        """Sets the net_weight of this ProductMeasurements.


        :param net_weight: The net_weight of this ProductMeasurements.  # noqa: E501
        :type: float
        """

        self._net_weight = net_weight

    @property
    def average_weight(self):
        """Gets the average_weight of this ProductMeasurements.  # noqa: E501


        :return: The average_weight of this ProductMeasurements.  # noqa: E501
        :rtype: float
        """
        return self._average_weight

    @average_weight.setter
    def average_weight(self, average_weight):
        """Sets the average_weight of this ProductMeasurements.


        :param average_weight: The average_weight of this ProductMeasurements.  # noqa: E501
        :type: float
        """

        self._average_weight = average_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductMeasurements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductMeasurements):
            return True

        return self.to_dict() != other.to_dict()
