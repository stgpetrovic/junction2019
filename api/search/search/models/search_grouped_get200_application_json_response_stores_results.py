# coding: utf-8

"""
    Search API

    Search API is a REST-like API which wraps the underlying ElasticSearch service for most common use cases. While this API is called the \"search\" service, in practice it acts as the main data engine for various Kesko services, providing high performance endpoints for fetching recipe, product, offer, store and article data.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.    Submitting excessive requests to the server may result in a HTTP 429 Too Many Requests status code and temporary limitations to your Subscription. We kindly ask that you to limit the concurrency of your requests and/or insert 50 â€“ 100 milliseconds of delay between the requests you send to the server. (i.e., 10 requests per second on average), since this environment doesn't run with the same specs as the real production instance.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from search.configuration import Configuration


class SearchGroupedGet200ApplicationJsonResponseStoresResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'id': 'str',
        'name': 'str',
        'chain_id': 'str',
        'chain_independent': 'bool',
        'chainless_name': 'str',
        'address': 'str',
        'store_url': 'str',
        'facebook_url': 'str',
        'post_code': 'str',
        'municipality': 'str',
        'municipality_swedish': 'str',
        'district': 'str',
        'shopping_center': 'str',
        'phone_number': 'str',
        'phone_number_pricing': 'str',
        'service_phone_number': 'str',
        'service_phone_number_info': 'str',
        'service_phone_number_pricing': 'str',
        'kruoka_url_slug': 'str',
        'prices_available': 'bool',
        'business_unit_ids': 'list[str]',
        'branch_code': 'int',
        'opening_hours': 'list[StoreOpeningHours]',
        'shopkeeper': 'StoreShopkeeper',
        'coordinate': 'StoreCoordinate',
        'delivery': 'StoreDelivery',
        'service_ids': 'list[float]',
        'sort': 'list[float]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'id': 'Id',
        'name': 'Name',
        'chain_id': 'ChainId',
        'chain_independent': 'ChainIndependent',
        'chainless_name': 'ChainlessName',
        'address': 'Address',
        'store_url': 'StoreUrl',
        'facebook_url': 'FacebookUrl',
        'post_code': 'PostCode',
        'municipality': 'Municipality',
        'municipality_swedish': 'MunicipalitySwedish',
        'district': 'District',
        'shopping_center': 'ShoppingCenter',
        'phone_number': 'PhoneNumber',
        'phone_number_pricing': 'PhoneNumberPricing',
        'service_phone_number': 'ServicePhoneNumber',
        'service_phone_number_info': 'ServicePhoneNumberInfo',
        'service_phone_number_pricing': 'ServicePhoneNumberPricing',
        'kruoka_url_slug': 'KruokaUrlSlug',
        'prices_available': 'PricesAvailable',
        'business_unit_ids': 'BusinessUnitIds',
        'branch_code': 'BranchCode',
        'opening_hours': 'OpeningHours',
        'shopkeeper': 'Shopkeeper',
        'coordinate': 'Coordinate',
        'delivery': 'Delivery',
        'service_ids': 'ServiceIds',
        'sort': 'Sort'
    }

    def __init__(self, resource_type=None, id=None, name=None, chain_id=None, chain_independent=None, chainless_name=None, address=None, store_url=None, facebook_url=None, post_code=None, municipality=None, municipality_swedish=None, district=None, shopping_center=None, phone_number=None, phone_number_pricing=None, service_phone_number=None, service_phone_number_info=None, service_phone_number_pricing=None, kruoka_url_slug=None, prices_available=None, business_unit_ids=None, branch_code=None, opening_hours=None, shopkeeper=None, coordinate=None, delivery=None, service_ids=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """SearchGroupedGet200ApplicationJsonResponseStoresResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._id = None
        self._name = None
        self._chain_id = None
        self._chain_independent = None
        self._chainless_name = None
        self._address = None
        self._store_url = None
        self._facebook_url = None
        self._post_code = None
        self._municipality = None
        self._municipality_swedish = None
        self._district = None
        self._shopping_center = None
        self._phone_number = None
        self._phone_number_pricing = None
        self._service_phone_number = None
        self._service_phone_number_info = None
        self._service_phone_number_pricing = None
        self._kruoka_url_slug = None
        self._prices_available = None
        self._business_unit_ids = None
        self._branch_code = None
        self._opening_hours = None
        self._shopkeeper = None
        self._coordinate = None
        self._delivery = None
        self._service_ids = None
        self._sort = None
        self.discriminator = None

        self.resource_type = resource_type
        self.id = id
        self.name = name
        self.chain_id = chain_id
        self.chain_independent = chain_independent
        self.chainless_name = chainless_name
        if address is not None:
            self.address = address
        if store_url is not None:
            self.store_url = store_url
        if facebook_url is not None:
            self.facebook_url = facebook_url
        if post_code is not None:
            self.post_code = post_code
        if municipality is not None:
            self.municipality = municipality
        if municipality_swedish is not None:
            self.municipality_swedish = municipality_swedish
        if district is not None:
            self.district = district
        if shopping_center is not None:
            self.shopping_center = shopping_center
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_pricing is not None:
            self.phone_number_pricing = phone_number_pricing
        if service_phone_number is not None:
            self.service_phone_number = service_phone_number
        if service_phone_number_info is not None:
            self.service_phone_number_info = service_phone_number_info
        if service_phone_number_pricing is not None:
            self.service_phone_number_pricing = service_phone_number_pricing
        if kruoka_url_slug is not None:
            self.kruoka_url_slug = kruoka_url_slug
        if prices_available is not None:
            self.prices_available = prices_available
        self.business_unit_ids = business_unit_ids
        self.branch_code = branch_code
        self.opening_hours = opening_hours
        if shopkeeper is not None:
            self.shopkeeper = shopkeeper
        self.coordinate = coordinate
        self.delivery = delivery
        if service_ids is not None:
            self.service_ids = service_ids
        if sort is not None:
            self.sort = sort

    @property
    def resource_type(self):
        """Gets the resource_type of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The resource_type of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param resource_type: The resource_type of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["store"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def id(self):
        """Gets the id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        Store identifier  # noqa: E501

        :return: The id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        Store identifier  # noqa: E501

        :param id: The id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param name: The name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def chain_id(self):
        """Gets the chain_id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The chain_id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param chain_id: The chain_id of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and chain_id is None:  # noqa: E501
            raise ValueError("Invalid value for `chain_id`, must not be `None`")  # noqa: E501
        allowed_values = ["kcitymarket", "ksupermarket", "kmarket", "nokm", "kmyllypuro"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and chain_id not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `chain_id` ({0}), must be one of {1}"  # noqa: E501
                .format(chain_id, allowed_values)
            )

        self._chain_id = chain_id

    @property
    def chain_independent(self):
        """Gets the chain_independent of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        `true`, if store does not belong to \"kcitymarket\", \"ksupermarket\", \"kmarket\" or \"nokm\" chains, e.g. K-Myllypuro.   # noqa: E501

        :return: The chain_independent of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: bool
        """
        return self._chain_independent

    @chain_independent.setter
    def chain_independent(self, chain_independent):
        """Sets the chain_independent of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        `true`, if store does not belong to \"kcitymarket\", \"ksupermarket\", \"kmarket\" or \"nokm\" chains, e.g. K-Myllypuro.   # noqa: E501

        :param chain_independent: The chain_independent of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and chain_independent is None:  # noqa: E501
            raise ValueError("Invalid value for `chain_independent`, must not be `None`")  # noqa: E501

        self._chain_independent = chain_independent

    @property
    def chainless_name(self):
        """Gets the chainless_name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        Store name without the chain name  # noqa: E501

        :return: The chainless_name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._chainless_name

    @chainless_name.setter
    def chainless_name(self, chainless_name):
        """Sets the chainless_name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        Store name without the chain name  # noqa: E501

        :param chainless_name: The chainless_name of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and chainless_name is None:  # noqa: E501
            raise ValueError("Invalid value for `chainless_name`, must not be `None`")  # noqa: E501

        self._chainless_name = chainless_name

    @property
    def address(self):
        """Gets the address of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The address of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param address: The address of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def store_url(self):
        """Gets the store_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The store_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._store_url

    @store_url.setter
    def store_url(self, store_url):
        """Sets the store_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param store_url: The store_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._store_url = store_url

    @property
    def facebook_url(self):
        """Gets the facebook_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The facebook_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._facebook_url

    @facebook_url.setter
    def facebook_url(self, facebook_url):
        """Sets the facebook_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param facebook_url: The facebook_url of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._facebook_url = facebook_url

    @property
    def post_code(self):
        """Gets the post_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The post_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param post_code: The post_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def municipality(self):
        """Gets the municipality of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The municipality of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param municipality: The municipality of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def municipality_swedish(self):
        """Gets the municipality_swedish of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The municipality_swedish of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._municipality_swedish

    @municipality_swedish.setter
    def municipality_swedish(self, municipality_swedish):
        """Sets the municipality_swedish of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param municipality_swedish: The municipality_swedish of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._municipality_swedish = municipality_swedish

    @property
    def district(self):
        """Gets the district of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The district of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param district: The district of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def shopping_center(self):
        """Gets the shopping_center of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The shopping_center of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._shopping_center

    @shopping_center.setter
    def shopping_center(self, shopping_center):
        """Sets the shopping_center of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param shopping_center: The shopping_center of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._shopping_center = shopping_center

    @property
    def phone_number(self):
        """Gets the phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param phone_number: The phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_pricing(self):
        """Gets the phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_pricing

    @phone_number_pricing.setter
    def phone_number_pricing(self, phone_number_pricing):
        """Sets the phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param phone_number_pricing: The phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._phone_number_pricing = phone_number_pricing

    @property
    def service_phone_number(self):
        """Gets the service_phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The service_phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._service_phone_number

    @service_phone_number.setter
    def service_phone_number(self, service_phone_number):
        """Sets the service_phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param service_phone_number: The service_phone_number of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._service_phone_number = service_phone_number

    @property
    def service_phone_number_info(self):
        """Gets the service_phone_number_info of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        Mixed information, may include pricing  # noqa: E501

        :return: The service_phone_number_info of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._service_phone_number_info

    @service_phone_number_info.setter
    def service_phone_number_info(self, service_phone_number_info):
        """Sets the service_phone_number_info of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        Mixed information, may include pricing  # noqa: E501

        :param service_phone_number_info: The service_phone_number_info of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._service_phone_number_info = service_phone_number_info

    @property
    def service_phone_number_pricing(self):
        """Gets the service_phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The service_phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._service_phone_number_pricing

    @service_phone_number_pricing.setter
    def service_phone_number_pricing(self, service_phone_number_pricing):
        """Sets the service_phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param service_phone_number_pricing: The service_phone_number_pricing of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._service_phone_number_pricing = service_phone_number_pricing

    @property
    def kruoka_url_slug(self):
        """Gets the kruoka_url_slug of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The kruoka_url_slug of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: str
        """
        return self._kruoka_url_slug

    @kruoka_url_slug.setter
    def kruoka_url_slug(self, kruoka_url_slug):
        """Sets the kruoka_url_slug of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param kruoka_url_slug: The kruoka_url_slug of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: str
        """

        self._kruoka_url_slug = kruoka_url_slug

    @property
    def prices_available(self):
        """Gets the prices_available of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        `true` if Mobile Scan price data is available, `false` otherwise   # noqa: E501

        :return: The prices_available of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: bool
        """
        return self._prices_available

    @prices_available.setter
    def prices_available(self, prices_available):
        """Sets the prices_available of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        `true` if Mobile Scan price data is available, `false` otherwise   # noqa: E501

        :param prices_available: The prices_available of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: bool
        """

        self._prices_available = prices_available

    @property
    def business_unit_ids(self):
        """Gets the business_unit_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        All alternative identifiers, always contains at least the one in the Id field   # noqa: E501

        :return: The business_unit_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._business_unit_ids

    @business_unit_ids.setter
    def business_unit_ids(self, business_unit_ids):
        """Sets the business_unit_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        All alternative identifiers, always contains at least the one in the Id field   # noqa: E501

        :param business_unit_ids: The business_unit_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and business_unit_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `business_unit_ids`, must not be `None`")  # noqa: E501

        self._business_unit_ids = business_unit_ids

    @property
    def branch_code(self):
        """Gets the branch_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The branch_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: int
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param branch_code: The branch_code of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and branch_code is None:  # noqa: E501
            raise ValueError("Invalid value for `branch_code`, must not be `None`")  # noqa: E501

        self._branch_code = branch_code

    @property
    def opening_hours(self):
        """Gets the opening_hours of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The opening_hours of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: list[StoreOpeningHours]
        """
        return self._opening_hours

    @opening_hours.setter
    def opening_hours(self, opening_hours):
        """Sets the opening_hours of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param opening_hours: The opening_hours of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: list[StoreOpeningHours]
        """
        if self.local_vars_configuration.client_side_validation and opening_hours is None:  # noqa: E501
            raise ValueError("Invalid value for `opening_hours`, must not be `None`")  # noqa: E501

        self._opening_hours = opening_hours

    @property
    def shopkeeper(self):
        """Gets the shopkeeper of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The shopkeeper of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: StoreShopkeeper
        """
        return self._shopkeeper

    @shopkeeper.setter
    def shopkeeper(self, shopkeeper):
        """Sets the shopkeeper of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param shopkeeper: The shopkeeper of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: StoreShopkeeper
        """

        self._shopkeeper = shopkeeper

    @property
    def coordinate(self):
        """Gets the coordinate of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The coordinate of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: StoreCoordinate
        """
        return self._coordinate

    @coordinate.setter
    def coordinate(self, coordinate):
        """Sets the coordinate of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param coordinate: The coordinate of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: StoreCoordinate
        """
        if self.local_vars_configuration.client_side_validation and coordinate is None:  # noqa: E501
            raise ValueError("Invalid value for `coordinate`, must not be `None`")  # noqa: E501

        self._coordinate = coordinate

    @property
    def delivery(self):
        """Gets the delivery of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501


        :return: The delivery of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: StoreDelivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this SearchGroupedGet200ApplicationJsonResponseStoresResults.


        :param delivery: The delivery of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: StoreDelivery
        """
        if self.local_vars_configuration.client_side_validation and delivery is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def service_ids(self):
        """Gets the service_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        List of identifiers for services provided by the store   # noqa: E501

        :return: The service_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: list[float]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        List of identifiers for services provided by the store   # noqa: E501

        :param service_ids: The service_ids of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: list[float]
        """

        self._service_ids = service_ids

    @property
    def sort(self):
        """Gets the sort of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501

        Only present, if the results are sorted by distance.   # noqa: E501

        :return: The sort of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :rtype: list[float]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchGroupedGet200ApplicationJsonResponseStoresResults.

        Only present, if the results are sorted by distance.   # noqa: E501

        :param sort: The sort of this SearchGroupedGet200ApplicationJsonResponseStoresResults.  # noqa: E501
        :type: list[float]
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchGroupedGet200ApplicationJsonResponseStoresResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchGroupedGet200ApplicationJsonResponseStoresResults):
            return True

        return self.to_dict() != other.to_dict()
