# coding: utf-8

"""
    Ingredients API

    Ingredient API is a REST-like API which keeps track of recipe ingredients and is integrated to the internal recipe creation tool (Reseptipankki). This service also integrates to Search API, which provides endpoints for searching default products for ingredients.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    As every other Kesko API service in this hackathon, authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class IngredientsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ingredients(self, **kwargs):  # noqa: E501
        """List all ingredients.  # noqa: E501

        Recipes consist of ingredients, and this service keeps track of known recipe ingredients. Ingredients have their unique ID, which is also returned from [Recipe Search API](https://kesko.portal.azure-api.net/docs/services/search/operations/post-search-recipes). <br><br> Most ingredients also belong to some product department, which can be used to classify ingredients into different groups. <br><br> Some ingredients also have one or more default products defined to them as list of EAN codes. These can be used to translate the 'free text' ingredients ('maitoa') into actual products (EAN 6410405069412, 'Pirkka kevytmaito 1l'). The default products are picked from the most common products sold in most of the Kesko stores. *Note*: Search API can also be used to search default products based on incredient IDs (with `ingredientType` filter), and this service should only be used as the source of raw data. <br><br> This endpoint returns quite verbose data, and some kind of caching is encouraged.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredients(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str query_term: Search based on matching of queryTerm against ingredient names. Can be used for getting as-you-write suggestions for ingredients. 
        :param bool exact_match: If `true`, queryTerm is compared case-sensitively to the whole ingredient name. If `false`, case insensitive partial matching is used, when comparing `queryTerm` to ingredient names. Default value is `false`. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ingredients_with_http_info(**kwargs)  # noqa: E501

    def get_ingredients_with_http_info(self, **kwargs):  # noqa: E501
        """List all ingredients.  # noqa: E501

        Recipes consist of ingredients, and this service keeps track of known recipe ingredients. Ingredients have their unique ID, which is also returned from [Recipe Search API](https://kesko.portal.azure-api.net/docs/services/search/operations/post-search-recipes). <br><br> Most ingredients also belong to some product department, which can be used to classify ingredients into different groups. <br><br> Some ingredients also have one or more default products defined to them as list of EAN codes. These can be used to translate the 'free text' ingredients ('maitoa') into actual products (EAN 6410405069412, 'Pirkka kevytmaito 1l'). The default products are picked from the most common products sold in most of the Kesko stores. *Note*: Search API can also be used to search default products based on incredient IDs (with `ingredientType` filter), and this service should only be used as the source of raw data. <br><br> This endpoint returns quite verbose data, and some kind of caching is encouraged.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredients_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str query_term: Search based on matching of queryTerm against ingredient names. Can be used for getting as-you-write suggestions for ingredients. 
        :param bool exact_match: If `true`, queryTerm is compared case-sensitively to the whole ingredient name. If `false`, case insensitive partial matching is used, when comparing `queryTerm` to ingredient names. Default value is `false`. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query_term', 'exact_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingredients" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query_term' in local_var_params and local_var_params['query_term'] is not None:  # noqa: E501
            query_params.append(('queryTerm', local_var_params['query_term']))  # noqa: E501
        if 'exact_match' in local_var_params and local_var_params['exact_match'] is not None:  # noqa: E501
            query_params.append(('exactMatch', local_var_params['exact_match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ingredients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ingredients_id(self, id, **kwargs):  # noqa: E501
        """Get single ingredient by its ID.  # noqa: E501

        Get single ingredient by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredients_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: Id of an ingredient. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ingredients_id_with_http_info(id, **kwargs)  # noqa: E501

    def get_ingredients_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get single ingredient by its ID.  # noqa: E501

        Get single ingredient by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingredients_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: Id of an ingredient. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingredients_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_ingredients_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/ingredients/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
