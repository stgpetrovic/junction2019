openapi: 3.0.1
info:
  title: Pricing & Availability API
  description: "Pricing & Availability API is a REST-like API which integrates to POS and knows up to date pricing and product availability data for each store. This service can also be used to create and fill temporary shopping baskets, that are kept for 24 hours before they are automatically deleted.\r\n\r\n**NOTE:** The API returns money in the responses. You should NOT use that data for actual payment transactions. They are only meant for displaying purposes, but they should work well enough for hackathon purposes.\r\n\r\nAPI requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.\r\n\r\nUse of `accept: application/json` and `content-type: application/json` headers is required when applicable.\r\n\r\nThe API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.\r\n\r\nAuthentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value."
  version: '1.0'
servers:
  - url: https://kesko.azure-api.net
paths:
  '/baskets/{longBasketId}/items':
    put:
      tags:
        - mobile
      summary: Add multiple items to the shopping basket at once.
      description: "Sets an array of items as the content of the basket. The first item in the array will have an item id of 0, the second one will have 1 and so on.\r\nExisting items in the basket are replaced if a supplied item has the same id, but otherwise items already existing in the basket will not be touched.\r\nEndpoint validation allows for items with empty EAN-codes or items with multipliers of zero. Such items won't be added to the basket and will be skipped and logged.\r\n\r\n** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***"
      operationId: put-baskets-longbasketid-items
      parameters:
        - name: longBasketId
          in: path
          description: Long id of the shopping basket
          required: true
          schema:
            type: string
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
        - name: x-basket-token
          in: header
          description: Basket authorization token
          required: true
          schema:
            type: string
      requestBody:
        description: "Bulk item object containing multiple partial basket item objects.\r\n"
        content:
          application/json: { }
      responses:
        '200':
          description: "Basket object. The new state of shopping basket is returned.\r\n"
          content:
            application/json: { }
        '400':
          description: Validation error / Too many items being added at once
          content:
            application/json: { }
        '404':
          description: Basket not found
          content:
            application/json: { }
  '/v2/stores/{storeId}/price':
    post:
      tags:
        - product
      summary: "Calculate price for each individual EAN row and the total for the requested EANs.\n"
      description: "Calculate price for each individual EAN row and the total for the requested EANs.\r\n"
      operationId: post-v2-stores-storeid-price
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
        - name: plussa
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: "An object containing the products for which the prices are fetched. Keys are EANs and values are quantity.\r\n"
        content:
          application/json: { }
      responses:
        '200':
          description: "An object containing prices for the individual products as well as the total price. Product keys are EANs and values are prices.\r\n"
          content:
            application/json: { }
        '400':
          description: Bad request
          content:
            application/json: { }
        '404':
          description: Store not found
          content:
            application/json: { }
  '/baskets/{longBasketId}/items/{itemId}':
    put:
      tags:
        - mobile
      summary: Create a new item to shopping basket.
      description: "It is up to the client to generate and handle the basket item id.\r\n\r\n** NOTE: This endpoint requires `x-basket-token` header value. The token is returned by the basket creation request. Otherwise the API will return 403 error. ***\r\n"
      operationId: put-baskets-longbasketid-items-itemid
      parameters:
        - name: longBasketId
          in: path
          description: Long id of the shopping basket
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: "Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.\n"
          required: true
          schema:
            type: integer
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
        - name: x-basket-token
          in: header
          description: Basket authorization token
          required: true
          schema:
            type: string
      requestBody:
        description: "Item object. This object also specifies the multiplier of items added.\r\n"
        content:
          application/json: { }
      responses:
        '200':
          description: "Basket object. The new state of shopping basket is returned.\r\n"
          content:
            application/json: { }
        '406':
          description: Basket is full and item couldn't be added.
          content:
            application/json: { }
    delete:
      tags:
        - mobile
      summary: Remove item from shopping basket.
      description: "Remove item from shopping basket.\r\n\r\n** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***"
      operationId: delete-baskets-longbasketid-items-itemid
      parameters:
        - name: longBasketId
          in: path
          description: Long id of the shopping basket
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: "Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.\n"
          required: true
          schema:
            type: integer
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
        - name: x-basket-token
          in: header
          description: Basket authorization token from basket creation response
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Basket object. The new state of shopping basket is returned.\r\n"
          content:
            application/json: { }
    patch:
      tags:
        - mobile
      summary: Update an item in shopping basket.
      description: "** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***\r\n\r\nThis can be used to update the meta data of an item in basket. You are not allowed to change the actual content of the item. That is enforced by allowing only partial basket item objects in write operations.\r\n"
      operationId: patch-baskets-longbasketid-items-itemid
      parameters:
        - name: longBasketId
          in: path
          description: Long id of the shopping basket
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: "Id of the basket item. **Note:** This should be an integer value and basket items are sorted based on this value, lowest id first.\n"
          required: true
          schema:
            type: integer
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
        - name: x-basket-token
          in: header
          description: 'Basket authorization token, returned from basket creation request'
          required: true
          schema:
            type: string
      requestBody:
        description: "Item object. This object also specifies the multiplier of items added.\r\n"
        content:
          application/json: { }
      responses:
        '200':
          description: "Basket object. The new state of shopping basket is returned.\r\n"
          content:
            application/json: { }
  '/baskets/{longBasketId}':
    delete:
      tags:
        - mobile
      summary: Delete shopping basket.
      description: "Delete shopping basket.\r\n\r\n** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***"
      operationId: delete-baskets-longbasketid
      parameters:
        - name: longBasketId
          in: path
          description: Long id of the shopping basket
          required: true
          schema:
            type: string
        - name: x-basket-token
          in: header
          description: Basket authorization token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: { }
        '404':
          description: Basket was not found
          content:
            application/json: { }
    get:
      tags:
        - mobile
      summary: Get shopping basket information with long id.
      description: "Get shopping basket information with long id.\r\n\r\n** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***"
      operationId: get-baskets-longbasketid
      parameters:
        - name: longBasketId
          in: path
          description: Long id of the shopping basket
          required: true
          schema:
            type: string
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
        - name: x-basket-token
          in: header
          description: 'Basket authorization token '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Basket object
          content:
            application/json: { }
        '404':
          description: Basket was not found
          content:
            application/json: { }
  '/v2/stores/{storeId}/product-pricing':
    post:
      tags:
        - product
      summary: Get individual product prices with promotion information.
      description: "Fetch individual product prices and gather promotion information. This endpoint converts the raw data in to a format utilized by mobile client details view.\r\n"
      operationId: post-v2-stores-storeid-product-pricing
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
        - name: plussa
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json: { }
      responses:
        '200':
          description: Found store object
          content:
            application/json: { }
        '400':
          description: Bad request
          content:
            application/json: { }
        '404':
          description: Store not found
          content:
            application/json: { }
  '/v2/stores/{storeId}':
    get:
      tags:
        - store
      summary: Get info for a single store.
      description: Get info for a single store.
      operationId: get-v2-stores-storeid
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found store object
          content:
            application/json: { }
  /v2/stores:
    get:
      tags:
        - store
      summary: Get info for multiple stores.
      description: Get info for multiple stores.
      operationId: get-v2-stores
      parameters:
        - name: ids
          in: query
          description: Store ids.
          schema:
            type: array
        - name: limit
          in: query
          description: "Limit for the quantity of returned results. Default: 20.\n"
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: "Offset for the current \"page\" ie. how many results to skip and when to start returning new results up to the defined limit. Default: 0.\n"
          schema:
            type: integer
            default: 0
        - name: lastSeen
          in: query
          description: Last seen EAN.
          schema:
            type: string
      responses:
        '200':
          description: An object where keys are store ids and values are Store objects.
          content:
            application/json: { }
        '400':
          description: Bad query parameters
          content:
            application/json: { }
  '/products/{storeId}':
    post:
      tags:
        - mobile
      summary: Get information for multiple products at once.
      description: Get information for multiple products at once.
      operationId: post-products-storeid
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: { }
      responses:
        '200':
          description: An object where keys are EANs and values are Product objects.
          content:
            application/json: { }
        '400':
          description: Bad request
          content:
            application/json: { }
        '404':
          description: Store not found
          content:
            application/json: { }
  /v2/products:
    get:
      tags:
        - product
      summary: Get availability information for products.
      description: "Returns the `pricingUnit` and availability of given products in all stores. If a store is returned in `stores` array, the product should be available in that physical store. If the store also has `web` flag set to true, the product is also available for web sales.\r\n<br><br>[Search API](https://kesko.portal.azure-api.net/docs/services/search/) uses this endpoint check if products are available during indexing process. If you want to check product for availability in your UI, you likely want to use Search APIs availability data.\r\n"
      operationId: get-v2-products-ean-ean
      parameters:
        - name: ean
          in: query
          required: true
          schema:
            type: array
      responses:
        '200':
          description: "An array containing product info objects.\r\n"
          content:
            application/json: { }
        '400':
          description: Bad request
          content:
            application/json: { }
  '/v4/stores/{storeId}/products':
    get:
      tags:
        - product
      summary: 'Get product details (pricing, promotions) for a specific store.'
      description: "This endpoint is used to fetch product details for a specific store. Multiple stores can have the same products with the same EAN codes, but all stores can have independent pricing and promotion details related to the same products, so this information is fetched on a store by store basis.\r\n<br><br>Product details can be queried for specific EAN codes or all of the available products can be queried in a paged manner. Paging is implemented by providing limit and offset attributes.\r\n<br><br>V4 endpoint adds proper support for basket sale sets. Previously the API just returned the number of baskets related to the promotion, but the V4 endpoint returns the basket details instead.\r\n<br><br>Product objects have quite a few optional attributes. Below there are a few examples of different types of products.\r\n<br>Products can have additional texts attached to them:<br><br>\r\n```\r\n{\r\n  \"711719870746\": {\r\n    \"ean\": \"711719870746\",\r\n    \"baseEan\": \"0711719870746\",\r\n    \"name\": \"PlayStation 4 1000Gt + 2 Ohjainta\",\r\n    \"group\": \"18950\",\r\n    \"price\": 180,\r\n    \"pricingUnit\": \"kpl\",\r\n    \"vat\": 24,\r\n    \"packageSize\": \"1.00\",\r\n    \"packageUnit\": \"kpl\",\r\n    \"packageType\": \"kpl\",\r\n    \"costCenterId\": \"KÄ01\",\r\n    \"plussaLimited\": false,\r\n    \"discountLimited\": false,\r\n    \"type\": \"UTILITY_GOOD\",\r\n    \"totalPrice\": 180,\r\n    \"texts\": [\r\n      {\r\n        \"type\": \"warranty\",\r\n        \"text\": \"\\\"Tuotteella on 12 kk takuu\\\"\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n<br>Products can consist of multiple `components`, have active `promotions` or `restrictions`. Promotions can affect the price returned by the api, and are automatically calculated:<br><br>\r\n```\r\n{\r\n  \"8594404005409\": {\r\n    \"ean\": \"8594404005409\",\r\n    \"baseEan\": \"8594404005409\",\r\n    \"name\": \"Pilsner Urquell 4,4% 0,5l tlk 4-pack\",\r\n    \"group\": \"15243\",\r\n    \"price\": 9.8,\r\n    \"pricingUnit\": \"kpl\",\r\n    \"vat\": 24,\r\n    \"packageSize\": \"2.00\",\r\n    \"packageUnit\": \"l\",\r\n    \"packageType\": \"pakkaus\",\r\n    \"costCenterId\": \"PA01\",\r\n    \"plussaLimited\": true,\r\n    \"discountLimited\": true,\r\n    \"type\": \"CONSUMER_GOOD\",\r\n    \"components\": [\r\n      {\r\n        \"baseEan\": \"2000973900008\",\r\n        \"name\": \"Tölkkipantti 0,15 0,33l-0,5l\",\r\n        \"group\": \"15300\",\r\n        \"price\": 0.15,\r\n        \"pricingUnit\": \"kpl\",\r\n        \"vat\": 24,\r\n        \"packageSize\": \"1.00\",\r\n        \"packageUnit\": \"kpl\",\r\n        \"packageType\": \"kpl\",\r\n        \"costCenterId\": \"PM02\",\r\n        \"plussaLimited\": false,\r\n        \"discountLimited\": true,\r\n        \"type\": \"CONSUMER_GOOD\",\r\n        \"totalPrice\": 0.6,\r\n        \"multiplier\": 4\r\n      }\r\n    ],\r\n    \"totalPrice\": 10.4,\r\n    \"restrictions\": {\r\n      \"cashierVerifyRequired\": true,\r\n      \"ageVerificationRequired\": true,\r\n      \"limitedSalesTime\": true\r\n    },\r\n    \"promotions\": [\r\n      {\r\n        \"id\": \"8594404005401000000012100001\",\r\n        \"type\": 121,\r\n        \"startDate\": \"2018-08-27\",\r\n        \"endDate\": \"2019-01-02\",\r\n        \"plussa\": false,\r\n        \"pricingMethod\": \"net\",\r\n        \"price\": 9.8,\r\n        \"rule\": \"simple\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n<br>Products can have multiplier immutability flag set. If the flag is set, you cannot modify the multiplier of these items:<br><br>\r\n```\r\n{\r\n  \"2000518600004\": {\r\n    \"ean\": \"2000518600004\",\r\n    \"baseEan\": \"2000518600004\",\r\n    \"name\": \"Omena Royal Gala\",\r\n    \"group\": \"11523\",\r\n    \"price\": 2.59,\r\n    \"pricingUnit\": \"kg\",\r\n    \"vat\": 14,\r\n    \"packageSize\": \"0.00\",\r\n    \"packageUnit\": \"kg\",\r\n    \"packageType\": \"kilo\",\r\n    \"costCenterId\": \"HE01\",\r\n    \"plussaLimited\": false,\r\n    \"discountLimited\": false,\r\n    \"type\": \"CONSUMER_GOOD\",\r\n    \"restrictions\": {\r\n      \"multiplierImmutable\": true\r\n    },\r\n    \"totalPrice\": 2.59,\r\n    \"scaleNumber\": \"67\",\r\n    \"texts\": [\r\n      {\r\n        \"type\": \"originCountry\",\r\n        \"text\": \"ITALIA\"\r\n      },\r\n      {\r\n        \"type\": \"productClass\",\r\n        \"text\": \"1LK\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n<br>Some products are sold by their weight. In that case the price is stored as part of the EAN, and baseEan returns the product ean without price:<br><br>\r\n```\r\n{\r\n  \"2000708404321\": {\r\n    \"ean\": \"2000708404321\",\r\n    \"baseEan\": \"2000708400001\",\r\n    \"name\": \"Palvikinkku\",\r\n    \"group\": \"11206\",\r\n    \"price\": 4.32,\r\n    \"pricingUnit\": \"kg\",\r\n    \"vat\": 14,\r\n    \"packageSize\": \"0.00\",\r\n    \"packageUnit\": \"kg\",\r\n    \"packageType\": \"kilo\",\r\n    \"costCenterId\": \"LJ01\",\r\n    \"plussaLimited\": false,\r\n    \"discountLimited\": false,\r\n    \"type\": \"CONSUMER_GOOD\",\r\n    \"restrictions\": {\r\n      \"multiplierImmutable\": true\r\n    },\r\n    \"unitPrice\": 0,\r\n    \"totalPrice\": 4.32\r\n  }\r\n}\r\n```\r\n"
      operationId: get-v4-stores-storeid-products
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
        - name: ean
          in: query
          description: "An EAN code or multiple EAN codes to return details for.\n"
          schema:
            type: string
        - name: limit
          in: query
          description: "Limit for the quantity of returned results. Default: 20.\n"
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: "Offset for the current \"page\" ie. how many results to skip and when to start returning new results up to the defined limit. Default: 0.\n"
          schema:
            type: integer
            default: 0
        - name: lastSeen
          in: query
          description: Last seen EAN.
          schema:
            type: string
      responses:
        '200':
          description: "An object where keys are EANs and values are Product objects with added promotion info.\r\n"
          content:
            application/json: { }
        '400':
          description: Bad request
          content:
            application/json: { }
        '404':
          description: Store not found
          content:
            application/json: { }
  '/baskets/store/{storeId}/{shortBasketId}':
    get:
      tags:
        - mobile
      summary: Get shopping basket information for store with short id.
      description: "Get shopping basket information for store with short id.\r\n\r\n** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***"
      operationId: get-baskets-store-storeid-shortbasketid
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
        - name: shortBasketId
          in: path
          description: Short id of the shopping basket
          required: true
          schema:
            type: string
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
        - name: x-basket-token
          in: header
          description: Basket authorization token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Basket object
          content:
            application/json: { }
        '404':
          description: Basket was not found
          content:
            application/json: { }
  /health:
    get:
      tags:
        - health
      summary: Simple health check.
      description: "Runs dummy queries on the database and caches.\r\n"
      operationId: get-health
      responses:
        '200':
          description: Confirmation
          content:
            application/json: { }
  '/baskets/{storeId}':
    post:
      tags:
        - mobile
      summary: Creates a new shopping basket for a certain store.
      description: "Body of the request should be empty. The basket is deleted after 24 hours!\r\n\r\n** NOTE: This endpoint retuns the \"token\", which must be used in subsequent basket requests as the `x-basket-token` header value. Otherwise the API will return 403 error. ***\r\n"
      operationId: post-baskets-storeid
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
        - name: includePromotionDetails
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Empty basket object with no items in it.
          content:
            application/json: { }
  '/products/{storeId}/{ean}':
    get:
      tags:
        - mobile
      summary: Get info for a single product.
      description: Get info for a single product.
      operationId: get-products-storeid-ean
      parameters:
        - name: storeId
          in: path
          description: 'Store id, for example C122.'
          required: true
          schema:
            type: string
        - name: ean
          in: path
          description: EAN code of the product
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product object
          content:
            application/json: { }
        '400':
          description: Bad request
          content:
            application/json: { }
        '404':
          description: Store not found
          content:
            application/json: { }
components:
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]
tags:
  - name: checkout
    description: 'Checkout endpoints, used by the cash register to get and mark baskets as handled. These endpoints communicate only with XML.'
  - name: export
    description: 'Data export endpoints, used by 3rd party services to get a CSV dump of the products'
  - name: health
    description: Health check.
  - name: mobile
    description: 'Mobile endpoints, used by mobile (or web) clients to create and manage shopping baskets.'
  - name: pricing
    description: 'Pricing endpoints, used to import pricing data into Mobile Scan system. These data import endpoints are heavy operations and designed to be used ~once per day nightly. The data parsing might take hours in the system.'
  - name: product
    description: 'Product endpoints, used by 3rd party services to fetch product information for stores. Information like availability, pricing and promotion information is served by these endpoints.'
  - name: store
    description: 'Store endpoints, used to fetch store information.'
x-ms-export-notes:
  - 'The exported API contains schemas that aren''t of content type ''application/vnd.oai.openapi.components+json'', and are hence not exported as OpenAPI components.'