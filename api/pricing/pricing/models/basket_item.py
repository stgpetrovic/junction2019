# coding: utf-8

"""
    Pricing & Availability API

    Pricing & Availability API is a REST-like API which integrates to POS and knows up to date pricing and product availability data for each store. This service can also be used to create and fill temporary shopping baskets, that are kept for 24 hours before they are automatically deleted.    **NOTE:** The API returns money in the responses. You should NOT use that data for actual payment transactions. They are only meant for displaying purposes, but they should work well enough for hackathon purposes.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    Authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api.pricing.pricing.configuration import Configuration


class BasketItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'multiplier': 'float',
        'total_price': 'float',
        'type': 'str',
        'item': 'BasketItemItem'
    }

    attribute_map = {
        'multiplier': 'multiplier',
        'total_price': 'totalPrice',
        'type': 'type',
        'item': 'item'
    }

    def __init__(self, multiplier=None, total_price=None, type=None, item=None, local_vars_configuration=None):  # noqa: E501
        """BasketItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._multiplier = None
        self._total_price = None
        self._type = None
        self._item = None
        self.discriminator = None

        if multiplier is not None:
            self.multiplier = multiplier
        if total_price is not None:
            self.total_price = total_price
        if type is not None:
            self.type = type
        if item is not None:
            self.item = item

    @property
    def multiplier(self):
        """Gets the multiplier of this BasketItem.  # noqa: E501


        :return: The multiplier of this BasketItem.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this BasketItem.


        :param multiplier: The multiplier of this BasketItem.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def total_price(self):
        """Gets the total_price of this BasketItem.  # noqa: E501


        :return: The total_price of this BasketItem.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this BasketItem.


        :param total_price: The total_price of this BasketItem.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def type(self):
        """Gets the type of this BasketItem.  # noqa: E501


        :return: The type of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BasketItem.


        :param type: The type of this BasketItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def item(self):
        """Gets the item of this BasketItem.  # noqa: E501


        :return: The item of this BasketItem.  # noqa: E501
        :rtype: BasketItemItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BasketItem.


        :param item: The item of this BasketItem.  # noqa: E501
        :type: BasketItemItem
        """

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasketItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasketItem):
            return True

        return self.to_dict() != other.to_dict()
