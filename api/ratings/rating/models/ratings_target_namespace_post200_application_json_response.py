# coding: utf-8

"""
    Ratings API

    Service which holds ratings of various targets, like recipes.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rating.configuration import Configuration


class RatingsTargetNamespacePost200ApplicationJsonResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'updated_at': 'datetime',
        'ip_address': 'str',
        'author_id': 'str',
        'report_count': 'int',
        'target_id': 'str',
        'target_namespace': 'str',
        'created_at': 'datetime',
        'rating': 'int',
        'ratings': 'RatingRatings',
        'comment': 'str',
        'author_name': 'str',
        'author_role': 'str',
        'reply_requested': 'bool',
        'published': 'bool',
        'moderated': 'bool',
        'category': 'str',
        'sub_category': 'str',
        'name': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'updated_at': 'updatedAt',
        'ip_address': 'ipAddress',
        'author_id': 'authorId',
        'report_count': 'reportCount',
        'target_id': 'targetId',
        'target_namespace': 'targetNamespace',
        'created_at': 'createdAt',
        'rating': 'rating',
        'ratings': 'ratings',
        'comment': 'comment',
        'author_name': 'authorName',
        'author_role': 'authorRole',
        'reply_requested': 'replyRequested',
        'published': 'published',
        'moderated': 'moderated',
        'category': 'category',
        'sub_category': 'subCategory',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, id=None, updated_at=None, ip_address=None, author_id=None, report_count=None, target_id=None, target_namespace=None, created_at=None, rating=None, ratings=None, comment=None, author_name=None, author_role=None, reply_requested=False, published=None, moderated=None, category=None, sub_category=None, name=None, url=None, local_vars_configuration=None):  # noqa: E501
        """RatingsTargetNamespacePost200ApplicationJsonResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._updated_at = None
        self._ip_address = None
        self._author_id = None
        self._report_count = None
        self._target_id = None
        self._target_namespace = None
        self._created_at = None
        self._rating = None
        self._ratings = None
        self._comment = None
        self._author_name = None
        self._author_role = None
        self._reply_requested = None
        self._published = None
        self._moderated = None
        self._category = None
        self._sub_category = None
        self._name = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if updated_at is not None:
            self.updated_at = updated_at
        if ip_address is not None:
            self.ip_address = ip_address
        if author_id is not None:
            self.author_id = author_id
        if report_count is not None:
            self.report_count = report_count
        self.target_id = target_id
        self.target_namespace = target_namespace
        if created_at is not None:
            self.created_at = created_at
        if rating is not None:
            self.rating = rating
        if ratings is not None:
            self.ratings = ratings
        if comment is not None:
            self.comment = comment
        if author_name is not None:
            self.author_name = author_name
        self.author_role = author_role
        if reply_requested is not None:
            self.reply_requested = reply_requested
        if published is not None:
            self.published = published
        if moderated is not None:
            self.moderated = moderated
        if category is not None:
            self.category = category
        if sub_category is not None:
            self.sub_category = sub_category
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Generated, id of a rating. This id is internal id of the rating in this service.   # noqa: E501

        :return: The id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Generated, id of a rating. This id is internal id of the rating in this service.   # noqa: E501

        :param id: The id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'[A-Za-z0-9\-_.()!@:\/]', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/[A-Za-z0-9\-_.()!@:\/]/`")  # noqa: E501

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Generated, date when rating was last updated  # noqa: E501

        :return: The updated_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Generated, date when rating was last updated  # noqa: E501

        :param updated_at: The updated_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def ip_address(self):
        """Gets the ip_address of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        IP address of the creator. This value is not returned for normal services. Only moderators and admin roles will see it.   # noqa: E501

        :return: The ip_address of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        IP address of the creator. This value is not returned for normal services. Only moderators and admin roles will see it.   # noqa: E501

        :param ip_address: The ip_address of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def author_id(self):
        """Gets the author_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Id of the user who created the rating. This is the user's id in the external service.   # noqa: E501

        :return: The author_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Id of the user who created the rating. This is the user's id in the external service.   # noqa: E501

        :param author_id: The author_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                author_id is not None and len(author_id) > 64):
            raise ValueError("Invalid value for `author_id`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                author_id is not None and len(author_id) < 1):
            raise ValueError("Invalid value for `author_id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                author_id is not None and not re.search(r'[A-Za-z0-9]', author_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `author_id`, must be a follow pattern or equal to `/[A-Za-z0-9]/`")  # noqa: E501

        self._author_id = author_id

    @property
    def report_count(self):
        """Gets the report_count of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Generated, represents how many times the rating has been reported as spam/bad content.   # noqa: E501

        :return: The report_count of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: int
        """
        return self._report_count

    @report_count.setter
    def report_count(self, report_count):
        """Sets the report_count of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Generated, represents how many times the rating has been reported as spam/bad content.   # noqa: E501

        :param report_count: The report_count of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                report_count is not None and report_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `report_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._report_count = report_count

    @property
    def target_id(self):
        """Gets the target_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Id of the rated object. This id is the external id of the other service.   # noqa: E501

        :return: The target_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Id of the rated object. This id is the external id of the other service.   # noqa: E501

        :param target_id: The target_id of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and target_id is None:  # noqa: E501
            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_id is not None and len(target_id) > 64):
            raise ValueError("Invalid value for `target_id`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_id is not None and len(target_id) < 1):
            raise ValueError("Invalid value for `target_id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_id is not None and not re.search(r'[A-Za-z0-9\-_.()!@:\/]', target_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `target_id`, must be a follow pattern or equal to `/[A-Za-z0-9\-_.()!@:\/]/`")  # noqa: E501

        self._target_id = target_id

    @property
    def target_namespace(self):
        """Gets the target_namespace of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Namespace of the rating targets. This is provided because external services might have targets with collisioning IDs. For example service A might have product with id 1, and service B product with also id 1. This attribute makes it possible to separate those two products. All external service which use this API should agree on unique namespaces. For example all food products register could have namespace: `food-products`.   # noqa: E501

        :return: The target_namespace of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Namespace of the rating targets. This is provided because external services might have targets with collisioning IDs. For example service A might have product with id 1, and service B product with also id 1. This attribute makes it possible to separate those two products. All external service which use this API should agree on unique namespaces. For example all food products register could have namespace: `food-products`.   # noqa: E501

        :param target_namespace: The target_namespace of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and target_namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `target_namespace`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_namespace is not None and len(target_namespace) > 64):
            raise ValueError("Invalid value for `target_namespace`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_namespace is not None and len(target_namespace) < 1):
            raise ValueError("Invalid value for `target_namespace`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_namespace is not None and not re.search(r'[A-Za-z0-9\-_]', target_namespace)):  # noqa: E501
            raise ValueError(r"Invalid value for `target_namespace`, must be a follow pattern or equal to `/[A-Za-z0-9\-_]/`")  # noqa: E501

        self._target_namespace = target_namespace

    @property
    def created_at(self):
        """Gets the created_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Generated, date when rating was created  # noqa: E501

        :return: The created_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Generated, date when rating was created  # noqa: E501

        :param created_at: The created_at of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def rating(self):
        """Gets the rating of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Rating of the rated object. You must define either `rating`, `comment` or both.   # noqa: E501

        :return: The rating of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Rating of the rated object. You must define either `rating`, `comment` or both.   # noqa: E501

        :param rating: The rating of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                rating is not None and rating > 5):  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `5`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                rating is not None and rating < 1):  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `1`")  # noqa: E501

        self._rating = rating

    @property
    def ratings(self):
        """Gets the ratings of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501


        :return: The ratings of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: RatingRatings
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this RatingsTargetNamespacePost200ApplicationJsonResponse.


        :param ratings: The ratings of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: RatingRatings
        """

        self._ratings = ratings

    @property
    def comment(self):
        """Gets the comment of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Comment for the object. You must define either `rating`, `comment` or both.   # noqa: E501

        :return: The comment of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Comment for the object. You must define either `rating`, `comment` or both.   # noqa: E501

        :param comment: The comment of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                comment is not None and len(comment) > 2000):
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `2000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                comment is not None and len(comment) < 1):
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `1`")  # noqa: E501

        self._comment = comment

    @property
    def author_name(self):
        """Gets the author_name of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Name of the user who created the rating.  # noqa: E501

        :return: The author_name of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Name of the user who created the rating.  # noqa: E501

        :param author_name: The author_name of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                author_name is not None and len(author_name) > 200):
            raise ValueError("Invalid value for `author_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                author_name is not None and len(author_name) < 1):
            raise ValueError("Invalid value for `author_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._author_name = author_name

    @property
    def author_role(self):
        """Gets the author_role of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Role of the rating's author.  # noqa: E501

        :return: The author_role of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._author_role

    @author_role.setter
    def author_role(self, author_role):
        """Sets the author_role of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Role of the rating's author.  # noqa: E501

        :param author_role: The author_role of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and author_role is None:  # noqa: E501
            raise ValueError("Invalid value for `author_role`, must not be `None`")  # noqa: E501
        allowed_values = ["anonymous", "registered", "moderator"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and author_role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `author_role` ({0}), must be one of {1}"  # noqa: E501
                .format(author_role, allowed_values)
            )

        self._author_role = author_role

    @property
    def reply_requested(self):
        """Gets the reply_requested of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Does the author want a reply for their comment. When no comment is given, this should be `false`. Default: `false`.   # noqa: E501

        :return: The reply_requested of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._reply_requested

    @reply_requested.setter
    def reply_requested(self, reply_requested):
        """Sets the reply_requested of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Does the author want a reply for their comment. When no comment is given, this should be `false`. Default: `false`.   # noqa: E501

        :param reply_requested: The reply_requested of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: bool
        """

        self._reply_requested = reply_requested

    @property
    def published(self):
        """Gets the published of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        **Only for moderators+** Indicates if the rating has been published or not. If a rating has been published, it will show up in rating listings. Otherwise the item won't be returned from the API at all. This value is not returned for normal services. Only moderators and admin roles will see it. Trying to get unpublished rating directly will result to 404.   # noqa: E501

        :return: The published of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        **Only for moderators+** Indicates if the rating has been published or not. If a rating has been published, it will show up in rating listings. Otherwise the item won't be returned from the API at all. This value is not returned for normal services. Only moderators and admin roles will see it. Trying to get unpublished rating directly will result to 404.   # noqa: E501

        :param published: The published of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def moderated(self):
        """Gets the moderated of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        **Only for moderators+** Indicates if the rating has been moderated or not. If rating has been moderated, this value will be set to `true`. This value is not returned for normal services. Only moderators and admin roles will see it.   # noqa: E501

        :return: The moderated of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._moderated

    @moderated.setter
    def moderated(self, moderated):
        """Sets the moderated of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        **Only for moderators+** Indicates if the rating has been moderated or not. If rating has been moderated, this value will be set to `true`. This value is not returned for normal services. Only moderators and admin roles will see it.   # noqa: E501

        :param moderated: The moderated of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: bool
        """

        self._moderated = moderated

    @property
    def category(self):
        """Gets the category of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Category of the rated object. The external service should have a subset of given categories. These are not designed to be user-speficied categories. For example category with special characters (e.g. Jälkiruoka) does not work.   # noqa: E501

        :return: The category of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Category of the rated object. The external service should have a subset of given categories. These are not designed to be user-speficied categories. For example category with special characters (e.g. Jälkiruoka) does not work.   # noqa: E501

        :param category: The category of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                category is not None and len(category) > 64):
            raise ValueError("Invalid value for `category`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                category is not None and len(category) < 1):
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                category is not None and not re.search(r'[A-Za-z0-9\-_]', category)):  # noqa: E501
            raise ValueError(r"Invalid value for `category`, must be a follow pattern or equal to `/[A-Za-z0-9\-_]/`")  # noqa: E501

        self._category = category

    @property
    def sub_category(self):
        """Gets the sub_category of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Sub category of the rated object. The external service should have a subset of given categories. These are not designed to be user-speficied categories. For example category with special characters (e.g. Jälkiruoka) does not work.   # noqa: E501

        :return: The sub_category of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Sub category of the rated object. The external service should have a subset of given categories. These are not designed to be user-speficied categories. For example category with special characters (e.g. Jälkiruoka) does not work.   # noqa: E501

        :param sub_category: The sub_category of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sub_category is not None and len(sub_category) > 64):
            raise ValueError("Invalid value for `sub_category`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sub_category is not None and len(sub_category) < 1):
            raise ValueError("Invalid value for `sub_category`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sub_category is not None and not re.search(r'[A-Za-z0-9\-_]', sub_category)):  # noqa: E501
            raise ValueError(r"Invalid value for `sub_category`, must be a follow pattern or equal to `/[A-Za-z0-9\-_]/`")  # noqa: E501

        self._sub_category = sub_category

    @property
    def name(self):
        """Gets the name of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        Name of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :return: The name of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        Name of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :param name: The name of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501

        URL of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :return: The url of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RatingsTargetNamespacePost200ApplicationJsonResponse.

        URL of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :param url: The url of this RatingsTargetNamespacePost200ApplicationJsonResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 2000):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and not re.search(r'[A-Za-z0-9\-._~:\/?#[]@!$&\'()+,;=]*', url)):  # noqa: E501
            raise ValueError(r"Invalid value for `url`, must be a follow pattern or equal to `/[A-Za-z0-9\-._~:\/?#[]@!$&'()+,;=]*/`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingsTargetNamespacePost200ApplicationJsonResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RatingsTargetNamespacePost200ApplicationJsonResponse):
            return True

        return self.to_dict() != other.to_dict()
