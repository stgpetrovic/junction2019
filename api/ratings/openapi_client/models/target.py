# coding: utf-8

"""
    Ratings API

    Service which holds ratings of various targets, like recipes.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Target(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'external_id': 'str',
        'namespace': 'str',
        'name': 'str',
        'url': 'str'
    }

    attribute_map = {
        'external_id': 'externalId',
        'namespace': 'namespace',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, external_id=None, namespace=None, name=None, url=None, local_vars_configuration=None):  # noqa: E501
        """Target - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._external_id = None
        self._namespace = None
        self._name = None
        self._url = None
        self.discriminator = None

        self.external_id = external_id
        self.namespace = namespace
        self.name = name
        self.url = url

    @property
    def external_id(self):
        """Gets the external_id of this Target.  # noqa: E501

        Id of the rated object. This id is the external id of the other service.   # noqa: E501

        :return: The external_id of this Target.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Target.

        Id of the rated object. This id is the external id of the other service.   # noqa: E501

        :param external_id: The external_id of this Target.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and external_id is None:  # noqa: E501
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 64):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) < 1):
            raise ValueError("Invalid value for `external_id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and not re.search(r'[A-Za-z0-9\-_.()!@:\/]', external_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `external_id`, must be a follow pattern or equal to `/[A-Za-z0-9\-_.()!@:\/]/`")  # noqa: E501

        self._external_id = external_id

    @property
    def namespace(self):
        """Gets the namespace of this Target.  # noqa: E501

        Namespace of the rating targets. This is provided because external services might have targets with collisioning IDs. For example service A might have product with id 1, and service B product with also id 1. This attribute makes it possible to separate those two products. All external service which use this API should agree on unique namespaces. For example all food products register could have namespace: `food-products`.   # noqa: E501

        :return: The namespace of this Target.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Target.

        Namespace of the rating targets. This is provided because external services might have targets with collisioning IDs. For example service A might have product with id 1, and service B product with also id 1. This attribute makes it possible to separate those two products. All external service which use this API should agree on unique namespaces. For example all food products register could have namespace: `food-products`.   # noqa: E501

        :param namespace: The namespace of this Target.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                namespace is not None and len(namespace) > 64):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                namespace is not None and len(namespace) < 1):
            raise ValueError("Invalid value for `namespace`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                namespace is not None and not re.search(r'[A-Za-z0-9\-_]', namespace)):  # noqa: E501
            raise ValueError(r"Invalid value for `namespace`, must be a follow pattern or equal to `/[A-Za-z0-9\-_]/`")  # noqa: E501

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this Target.  # noqa: E501

        Name of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :return: The name of this Target.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Target.

        Name of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :param name: The name of this Target.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this Target.  # noqa: E501

        URL of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :return: The url of this Target.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Target.

        URL of the rated object. For moderation purposes. Only moderators and admin roles will see it.   # noqa: E501

        :param url: The url of this Target.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 2000):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and not re.search(r'[A-Za-z0-9\-._~:\/?#[]@!$&\'()+,;=]*', url)):  # noqa: E501
            raise ValueError(r"Invalid value for `url`, must be a follow pattern or equal to `/[A-Za-z0-9\-._~:\/?#[]@!$&'()+,;=]*/`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Target):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Target):
            return True

        return self.to_dict() != other.to_dict()
