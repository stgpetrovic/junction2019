# coding: utf-8

"""
    Ratings API

    Service which holds ratings of various targets, like recipes.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RatingSummaryDistribution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_1': 'int',
        '_2': 'int',
        '_3': 'int',
        '_4': 'int',
        '_5': 'int'
    }

    attribute_map = {
        '_1': '1',
        '_2': '2',
        '_3': '3',
        '_4': '4',
        '_5': '5'
    }

    def __init__(self, _1=None, _2=None, _3=None, _4=None, _5=None, local_vars_configuration=None):  # noqa: E501
        """RatingSummaryDistribution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__1 = None
        self.__2 = None
        self.__3 = None
        self.__4 = None
        self.__5 = None
        self.discriminator = None

        if _1 is not None:
            self._1 = _1
        if _2 is not None:
            self._2 = _2
        if _3 is not None:
            self._3 = _3
        if _4 is not None:
            self._4 = _4
        if _5 is not None:
            self._5 = _5

    @property
    def _1(self):
        """Gets the _1 of this RatingSummaryDistribution.  # noqa: E501


        :return: The _1 of this RatingSummaryDistribution.  # noqa: E501
        :rtype: int
        """
        return self.__1

    @_1.setter
    def _1(self, _1):
        """Sets the _1 of this RatingSummaryDistribution.


        :param _1: The _1 of this RatingSummaryDistribution.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                _1 is not None and _1 < 0):  # noqa: E501
            raise ValueError("Invalid value for `_1`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__1 = _1

    @property
    def _2(self):
        """Gets the _2 of this RatingSummaryDistribution.  # noqa: E501


        :return: The _2 of this RatingSummaryDistribution.  # noqa: E501
        :rtype: int
        """
        return self.__2

    @_2.setter
    def _2(self, _2):
        """Sets the _2 of this RatingSummaryDistribution.


        :param _2: The _2 of this RatingSummaryDistribution.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                _2 is not None and _2 < 0):  # noqa: E501
            raise ValueError("Invalid value for `_2`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__2 = _2

    @property
    def _3(self):
        """Gets the _3 of this RatingSummaryDistribution.  # noqa: E501


        :return: The _3 of this RatingSummaryDistribution.  # noqa: E501
        :rtype: int
        """
        return self.__3

    @_3.setter
    def _3(self, _3):
        """Sets the _3 of this RatingSummaryDistribution.


        :param _3: The _3 of this RatingSummaryDistribution.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                _3 is not None and _3 < 0):  # noqa: E501
            raise ValueError("Invalid value for `_3`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__3 = _3

    @property
    def _4(self):
        """Gets the _4 of this RatingSummaryDistribution.  # noqa: E501


        :return: The _4 of this RatingSummaryDistribution.  # noqa: E501
        :rtype: int
        """
        return self.__4

    @_4.setter
    def _4(self, _4):
        """Sets the _4 of this RatingSummaryDistribution.


        :param _4: The _4 of this RatingSummaryDistribution.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                _4 is not None and _4 < 0):  # noqa: E501
            raise ValueError("Invalid value for `_4`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__4 = _4

    @property
    def _5(self):
        """Gets the _5 of this RatingSummaryDistribution.  # noqa: E501


        :return: The _5 of this RatingSummaryDistribution.  # noqa: E501
        :rtype: int
        """
        return self.__5

    @_5.setter
    def _5(self, _5):
        """Sets the _5 of this RatingSummaryDistribution.


        :param _5: The _5 of this RatingSummaryDistribution.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                _5 is not None and _5 < 0):  # noqa: E501
            raise ValueError("Invalid value for `_5`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__5 = _5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingSummaryDistribution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RatingSummaryDistribution):
            return True

        return self.to_dict() != other.to_dict()
