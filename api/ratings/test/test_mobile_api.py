# coding: utf-8

"""
    Pricing & Availability API

    Pricing & Availability API is a REST-like API which integrates to POS and knows up to date pricing and product availability data for each store. This service can also be used to create and fill temporary shopping baskets, that are kept for 24 hours before they are automatically deleted.    **NOTE:** The API returns money in the responses. You should NOT use that data for actual payment transactions. They are only meant for displaying purposes, but they should work well enough for hackathon purposes.    API requests are only served over HTTPS, using TLS 1.0, 1.1, and 1.2. Requests will not be honored over plaintext HTTP.    Use of `accept: application/json` and `content-type: application/json` headers is required when applicable.    The API uses UTF-8 character encoding for all responses. Some fields may include characters that are not in the ASCII range.    Authentication is accomplished by providing `Ocp-Apim-Subscription-Key` header with your subscription key as the value.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import openapi_client
from openapi_client.api.mobile_api import MobileApi  # noqa: E501
from openapi_client.rest import ApiException


class TestMobileApi(unittest.TestCase):
    """MobileApi unit test stubs"""

    def setUp(self):
        self.api = openapi_client.api.mobile_api.MobileApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_delete_baskets_longbasketid(self):
        """Test case for delete_baskets_longbasketid

        Delete shopping basket.  # noqa: E501
        """
        pass

    def test_delete_baskets_longbasketid_items_itemid(self):
        """Test case for delete_baskets_longbasketid_items_itemid

        Remove item from shopping basket.  # noqa: E501
        """
        pass

    def test_get_baskets_longbasketid(self):
        """Test case for get_baskets_longbasketid

        Get shopping basket information with long id.  # noqa: E501
        """
        pass

    def test_get_baskets_store_storeid_shortbasketid(self):
        """Test case for get_baskets_store_storeid_shortbasketid

        Get shopping basket information for store with short id.  # noqa: E501
        """
        pass

    def test_get_products_storeid_ean(self):
        """Test case for get_products_storeid_ean

        Get info for a single product.  # noqa: E501
        """
        pass

    def test_patch_baskets_longbasketid_items_itemid(self):
        """Test case for patch_baskets_longbasketid_items_itemid

        Update an item in shopping basket.  # noqa: E501
        """
        pass

    def test_post_baskets_storeid(self):
        """Test case for post_baskets_storeid

        Creates a new shopping basket for a certain store.  # noqa: E501
        """
        pass

    def test_post_products_storeid(self):
        """Test case for post_products_storeid

        Get information for multiple products at once.  # noqa: E501
        """
        pass

    def test_put_baskets_longbasketid_items(self):
        """Test case for put_baskets_longbasketid_items

        Add multiple items to the shopping basket at once.  # noqa: E501
        """
        pass

    def test_put_baskets_longbasketid_items_itemid(self):
        """Test case for put_baskets_longbasketid_items_itemid

        Create a new item to shopping basket.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
